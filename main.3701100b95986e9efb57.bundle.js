/*! For license information please see main.3701100b95986e9efb57.bundle.js.LICENSE.txt */
(self.webpackChunklearning_web_catalog=self.webpackChunklearning_web_catalog||[]).push([[179],{461:function(e,t,s){"use strict";function a(e,t,s,a,r,i,n){try{var l=e[i](n),o=l.value}catch(e){return void s(e)}l.done?t(o):Promise.resolve(o).then(a,r)}function r(e){return function(){var t=this,s=arguments;return new Promise((function(r,i){var n=e.apply(t,s);function l(e){a(n,r,i,l,o,"next",e)}function o(e){a(n,r,i,l,o,"throw",e)}l(void 0)}))}}var i=s(687),n=s.n(i);function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var s=0,a=new Array(t);s<t;s++)a[s]=e[s];return a}function o(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return l(e,t);var s=Object.prototype.toString.call(e).slice(8,-1);return"Object"===s&&e.constructor&&(s=e.constructor.name),"Map"===s||"Set"===s?Array.from(e):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?l(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var d=document,c=function(){var e=document.getElementById("wrapper"),t=e.querySelector("header"),s=e.querySelector(".innerHeader"),a=e.querySelector("footer"),r=d.getElementById("root");e.style.paddingBottom="".concat(a.clientHeight-10,"px");var i=d.querySelector(".categories"),n=d.querySelector(".categories__inner"),l=d.querySelector(".categories__wrapper"),c=d.querySelector(".products"),p=d.querySelector(".products__list");c.style.minHeight="".concat(e.clientHeight-(a.clientHeight-10+t.clientHeight),"px");var u=d.querySelector(".search-bar__box"),m=d.querySelector(".search-bar__button"),h=d.querySelector(".products__filters"),f=d.querySelector(".orderbyBox__current"),g=o(d.querySelectorAll(".orderbyBox__option")),v=o(d.getElementsByName("orderby")),w=o(d.querySelectorAll(".orderView__button")),y=d.querySelector(".pagination"),b=d.createElement("p"),E=d.createElement("span"),x=d.createElement("span"),S=d.createElement("button"),T=d.createElement("button");S.innerHTML='<svg viewBox="0 0 49 87" xmlns="http://www.w3.org/2000/svg">\n                              <path d="M47.8041 85.8417C49.3985 84.2976 49.3988 81.7936 47.8039 80.2492L9.85798 43.5009L47.8041 6.75081C49.3985 5.20669 49.3988 2.70267 47.8039 1.15829C46.2092 -0.386096 43.6239 -0.386096 42.0292 1.15829L1.19587 40.7048C0.430106 41.4464 -6.98164e-06 42.4522 -7.02749e-06 43.5009C-7.07333e-06 44.5497 0.430376 45.5557 1.19614 46.2971L42.0295 85.8415C43.6239 87.3861 46.2094 87.3861 47.8041 85.8417Z"/>\n                            </svg>',T.innerHTML='<svg viewBox="0 0 49 87" xmlns="http://www.w3.org/2000/svg">\n                              <path d="M1.19587 1.15825C-0.398537 2.70237 -0.398809 5.20638 1.19614 6.75077L39.142 43.4991L1.19587 80.2492C-0.398534 81.7933 -0.398806 84.2973 1.19614 85.8417C2.79082 87.3861 5.37612 87.3861 6.9708 85.8417L47.8041 46.2952C48.5699 45.5536 49 44.5478 49 43.4991C49 42.4503 48.5696 41.4443 47.8039 40.7029L6.97052 1.15852C5.37611 -0.386131 2.79055 -0.386132 1.19587 1.15825Z"/>\n                            </svg>';var M=[S,T];return E.classList.add("pagination__current"),x.classList.add("pagination__total"),b.classList.add("pagination__counter"),S.classList.add("pagination__button","pagination__button--prevPage"),T.classList.add("pagination__button","pagination__button--nextPage"),S.innerText="PREV",T.innerText="NEXT",{wrapper:e,header:t,innerHeader:s,root:r,categoriesContainerEl:i,categoriesInnerContainerEl:n,categoriesWrapperEl:l,productContainerEl:p,filtersBarEl:h,searchBarEl:u,searchBarElButtonEl:m,orderByEl:f,orderByLabelEl:g,orderByOptionEl:v,orderViewButtonEl:w,paginationEl:y,pageCounterEl:b,currentPagesEl:E,totalPagesEl:x,prevButtonEl:S,nextButtonEl:T,paginationButton:M}},p="https://api.escuelajs.co/api/v1";function u(e){return m.apply(this,arguments)}function m(){return(m=r(n().mark((function e(t){var s,a;return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch(p+t);case 3:return s=e.sent,e.next=6,s.json();case 6:return a=e.sent,e.abrupt("return",a);case 10:e.prev=10,e.t0=e.catch(0),console.log("Fetch Error",e.t0);case 13:case 14:case"end":return e.stop()}}),e,null,[[0,10]])})))).apply(this,arguments)}var h=document,f=c(),g=f.productContainerEl,v=f.searchBarEl,w=f.searchBarElButtonEl,y=f.orderByEl,b=f.orderByLabelEl,E=f.orderByOptionEl,x=f.orderViewButtonEl,S=f.paginationEl,T=f.pageCounterEl,M=f.currentPagesEl,C=f.totalPagesEl,L=f.prevButtonEl,P=f.nextButtonEl,k=f.paginationButton,A=0,z=function(e,t,s,a,r,i){var n=this;this.id=e,this.name=t,this.price=s,this.type=a,this.description=r,this.image=i,this.template=function(){var e=h.createElement("li"),t=h.createElement("figure"),s=h.createElement("img"),a=h.createElement("div"),r=h.createElement("span"),i=h.createElement("p"),l=h.createElement("p");return t.classList.add("product-item__image"),s.setAttribute("alt",n.name),s.src=n.image,r.classList.add("product-item__tag"),i.classList.add("product-item__name"),l.classList.add("product-item__price"),a.classList.add("product-item__info"),a.appendChild(r).innerText=n.type,a.appendChild(i).innerText=n.name,a.appendChild(l).innerText="$".concat(n.price,"000 COP"),e.classList.add("product-item"),e.dataset.id=n.id,e.appendChild(s),e.appendChild(a),e.onclick=function(){return n.handleModal.show()},e},this.modalTemplate=function(){var e=h.createElement("div"),t=h.createElement("div");return e.setAttribute("id","modal-product"),e.classList.add("modal-background"),t.classList.add("modal-product"),t.onclick=function(e){return e.stopPropagation()},t.innerHTML='\n                        <figure class="modal-product__image">\n                          <img class="modal-product__image" src="'.concat(n.image,'" alt="').concat(n.name,'">\n                        </figure>\n                        <div class="modal-product__info">\n                          <div class="">\n                            <p class="modal-product__name">').concat(n.name,'</p>\n                            <em class="modal-product__type">').concat(n.type,'</em>\n                          </div>\n                          <p class="modal-product__price">$').concat(n.price,'000 COP</p>\n                          <p class="modal-product__description">').concat(n.description,'</p>\n                        </div>\n                        <button class="modal-product__close" onclick="document.getElementById(\'modal-product\').remove()">\n                          <svg viewBox="0 0 21 21" xmlns="http://www.w3.org/2000/svg">\n                            <path d="M11.6049 10.5L20.2712 1.83372C20.5763 1.5286 20.5763 1.03392 20.2712 0.728838C19.966 0.42376 19.4714 0.423721 19.1663 0.728838L10.5 9.39516L1.83372 0.728838C1.5286 0.423721 1.03391 0.423721 0.728837 0.728838C0.42376 1.03395 0.423721 1.52864 0.728837 1.83372L9.3951 10.5L0.728837 19.1663C0.423721 19.4714 0.423721 19.9661 0.728837 20.2712C0.881376 20.4237 1.08134 20.5 1.2813 20.5C1.48126 20.5 1.68118 20.4237 1.83376 20.2712L10.5 11.6049L19.1662 20.2712C19.3188 20.4237 19.5187 20.5 19.7187 20.5C19.9187 20.5 20.1186 20.4237 20.2712 20.2712C20.5763 19.9661 20.5763 19.4714 20.2712 19.1663L11.6049 10.5Z"/>\n                          </svg>\n                        </button>'),e.onclick=function(){return n.handleModal.close()},e.appendChild(t),e},this.handleModal={show:function(){h.body.appendChild(n.modalTemplate())},close:function(){h.body.contains(h.getElementById("modal-product"))&&h.getElementById("modal-product").remove()}}},I=function(){var e=window.innerWidth,t=function(e){return x.find((function(t){return t.classList.contains(e)}))};return g.removeAttribute("style"),x.forEach((function(e){return e.classList.remove("active","one-column")})),e>=1025?t("orderView__button--five").classList.add("active"):e>=900?t("orderView__button--four").classList.add("active"):e>=768?t("orderView__button--three").classList.add("active"):e>=320?t("orderView__button--two").classList.add("active"):e>=0?(g.classList.add("one-column"),void t("orderView__button--one").classList.add("active")):void 0},$=function(e){0===e&&(A=0),g.innerHTML=""},O=function(){var e=r(n().mark((function e(t,s){var a,r,i;return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=E.find((function(e){return e.checked})).value,e.next=3,u(t+s);case 3:r=e.sent,e.t0=a,e.next="asc"===e.t0?7:"dec"===e.t0?9:"maxPrice"===e.t0?11:"minPrice"===e.t0?13:15;break;case 7:return i=r.sort((function(e,t){return e.title.toUpperCase()>t.title.toUpperCase()?1:e.title.toUpperCase()<t.title.toUpperCase()?-1:0})),e.abrupt("break",17);case 9:return i=r.sort((function(e,t){return e.title.toUpperCase()<t.title.toUpperCase()?1:e.title.toUpperCase()>t.title.toUpperCase()?-1:0})),e.abrupt("break",17);case 11:return i=r.sort((function(e,t){return e.price<t.price?1:e.price>t.price?-1:0})),e.abrupt("break",17);case 13:return i=r.sort((function(e,t){return e.price>t.price?1:e.price<t.price?-1:0})),e.abrupt("break",17);case 15:return i=r,e.abrupt("break",17);case 17:return e.abrupt("return",i);case 18:case"end":return e.stop()}}),e)})));return function(t,s){return e.apply(this,arguments)}}(),_=function(e,t){var s=15*A,a=s+15;return A<t&&A++,e.slice(s,a)},D=function(){var e=r(n().mark((function e(){var t,s,a,r,i;return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=function(e){L.toggleAttribute("disabled",1===A),P.toggleAttribute("disabled",A===e)},void 0,void 0,n=v.value,l=Number(h.querySelector(".category-item.active").dataset.id),t=n&&l?"/?categoryId=".concat(l,"&title=").concat(n):n?"/?title=".concat(n):l&&0!==l?"/?categoryId=".concat(l):"",e.next=5,O("/products",t);case 5:s=e.sent,a=Math.ceil(s.length/15),i=_(s,a),console.log(i.length),i.length&&(i.forEach((function(e){var t=new z(e.id,e.title,e.price,e.category.name,e.description,e.images[0]);g.appendChild(t.template())})),M.innerHTML=A,C.innerHTML=a,h.body.contains(T)||(T.appendChild(M),M.insertAdjacentText("afterend","de"),T.appendChild(C),S.appendChild(L),S.appendChild(T),S.appendChild(P)),r(a));case 11:case"end":return e.stop()}var n,l}),e)})));return function(){return e.apply(this,arguments)}}();function B(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function G(e={},t={}){Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:B(t[s])&&B(e[s])&&Object.keys(t[s]).length>0&&G(e[s],t[s])}))}k.forEach((function(e){e.onclick=r(n().mark((function t(){return n().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.classList.contains("pagination__button--prevPage")&&A>1&&(A-=2),$(),t.next=4,D();case 4:case"end":return t.stop()}}),t)})))})),h.onclick=function(e){return(!y.contains(e.target)||e.target.classList.contains("orderbyBox__input"))&&y.parentNode.classList.remove("active")},y.onclick=function(){return y.parentNode.classList.toggle("active")},b.forEach((function(e){e.onclick=function(){var t=r(n().mark((function t(s){return n().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:Array.from(e.parentElement.parentElement.children).forEach((function(e){return e.children[0].classList.remove("checked")})),e.classList.add("checked");case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()})),E.forEach((function(e){e.onclick=r(n().mark((function e(){return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return $(0),e.next=3,D();case 3:case"end":return e.stop()}}),e)})))})),x.forEach((function(e){e.onclick=function(t){var s=e.dataset.order;Array.from(e.parentElement.children).forEach((function(e){return e.classList.remove("active")})),e.classList.add("active"),g.removeAttribute("style"),g.style.gridTemplateColumns="repeat(".concat(s,", 1fr)"),g.classList.remove("one-column"),e.classList.contains("orderView__button--one")&&g.classList.add("one-column")}})),I(),window.addEventListener("resize",I),v.addEventListener("change",function(){var e=r(n().mark((function e(t){return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return $(0),e.next=3,D();case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),w.onclick=function(){var e=r(n().mark((function e(t){return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return $(0),e.next=3,D();case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();const H={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function X(){const e="undefined"!=typeof document?document:{};return G(e,H),e}const Y={document:H,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function N(){const e="undefined"!=typeof window?window:{};return G(e,Y),e}function q(e,t=0){return setTimeout(e,t)}function j(){return Date.now()}function R(e,t="x"){const s=N();let a,r,i;const n=function(e){const t=N();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(r=n.transform||n.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map((e=>e.replace(",","."))).join(", ")),i=new s.WebKitCSSMatrix("none"===r?"":r)):(i=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),a=i.toString().split(",")),"x"===t&&(r=s.WebKitCSSMatrix?i.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),"y"===t&&(r=s.WebKitCSSMatrix?i.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),r||0}function V(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function F(...e){const t=Object(e[0]),s=["__proto__","constructor","prototype"];for(let r=1;r<e.length;r+=1){const i=e[r];if(null!=i&&(a=i,!("undefined"!=typeof window&&void 0!==window.HTMLElement?a instanceof HTMLElement:a&&(1===a.nodeType||11===a.nodeType)))){const e=Object.keys(Object(i)).filter((e=>s.indexOf(e)<0));for(let s=0,a=e.length;s<a;s+=1){const a=e[s],r=Object.getOwnPropertyDescriptor(i,a);void 0!==r&&r.enumerable&&(V(t[a])&&V(i[a])?i[a].__swiper__?t[a]=i[a]:F(t[a],i[a]):!V(t[a])&&V(i[a])?(t[a]={},i[a].__swiper__?t[a]=i[a]:F(t[a],i[a])):t[a]=i[a])}}}var a;return t}function W(e,t,s){e.style.setProperty(t,s)}function U({swiper:e,targetPosition:t,side:s}){const a=N(),r=-e.translate;let i,n=null;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",a.cancelAnimationFrame(e.cssModeFrameID);const o=t>r?"next":"prev",d=(e,t)=>"next"===o&&e>=t||"prev"===o&&e<=t,c=()=>{i=(new Date).getTime(),null===n&&(n=i);const o=Math.max(Math.min((i-n)/l,1),0),p=.5-Math.cos(o*Math.PI)/2;let u=r+p*(t-r);if(d(u,t)&&(u=t),e.wrapperEl.scrollTo({[s]:u}),d(u,t))return e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout((()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[s]:u})})),void a.cancelAnimationFrame(e.cssModeFrameID);e.cssModeFrameID=a.requestAnimationFrame(c)};c()}function K(e){return e.querySelector(".swiper-slide-transform")||e.shadowEl&&e.shadowEl.querySelector(".swiper-slide-transform")||e}function Z(e,t=""){return[...e.children].filter((e=>e.matches(t)))}function Q(e,t=[]){const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:[t]),s}function J(e){const t=N(),s=X(),a=e.getBoundingClientRect(),r=s.body,i=e.clientTop||r.clientTop||0,n=e.clientLeft||r.clientLeft||0,l=e===t?t.scrollY:e.scrollTop,o=e===t?t.scrollX:e.scrollLeft;return{top:a.top+l-i,left:a.left+o-n}}function ee(e,t){return N().getComputedStyle(e,null).getPropertyValue(t)}function te(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function se(e,t){const s=[];let a=e.parentElement;for(;a;)t?a.matches(t)&&s.push(a):s.push(a),a=a.parentElement;return s}function ae(e,t){t&&e.addEventListener("transitionend",(function s(a){a.target===e&&(t.call(e,a),e.removeEventListener("transitionend",s))}))}function re(e,t,s){const a=N();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let ie,ne,le;function oe(){return ie||(ie=function(){const e=N(),t=X();return{smoothScroll:t.documentElement&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),ie}var de={on(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;const r=s?"unshift":"push";return e.split(" ").forEach((e=>{a.eventsListeners[e]||(a.eventsListeners[e]=[]),a.eventsListeners[e][r](t)})),a},once(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;function r(...s){a.off(e,r),r.__emitterProxy&&delete r.__emitterProxy,t.apply(a,s)}return r.__emitterProxy=t,a.on(e,r,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const a=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[a](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((a,r)=>{(a===t||a.__emitterProxy&&a.__emitterProxy===t)&&s.eventsListeners[e].splice(r,1)}))})),s):s},emit(...e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsListeners)return t;let s,a,r;return"string"==typeof e[0]||Array.isArray(e[0])?(s=e[0],a=e.slice(1,e.length),r=t):(s=e[0].events,a=e[0].data,r=e[0].context||t),a.unshift(r),(Array.isArray(s)?s:s.split(" ")).forEach((e=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach((t=>{t.apply(r,[e,...a])})),t.eventsListeners&&t.eventsListeners[e]&&t.eventsListeners[e].forEach((e=>{e.apply(r,a)}))})),t}};const ce=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){const t=s.querySelector(`.${e.params.lazyPreloaderClass}`);t&&t.remove()}},pe=(e,t)=>{if(!e.slides[t])return;const s=e.slides[t].querySelector('[loading="lazy"]');s&&s.removeAttribute("loading")},ue=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const s=e.slides.length;if(!s||!t||t<0)return;t=Math.min(t,s);const a="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),r=e.activeIndex,i=r+a-1;if(e.params.rewind)for(let a=r-t;a<=i+t;a+=1){const t=(a%s+s)%s;t!==r&&t>i&&pe(e,t)}else for(let a=Math.max(i-t,0);a<=Math.min(i+t,s-1);a+=1)a!==r&&a>i&&pe(e,a)};var me={updateSize:function(){const e=this;let t,s;const a=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:a.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:a.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(ee(a,"padding-left")||0,10)-parseInt(ee(a,"padding-right")||0,10),s=s-parseInt(ee(a,"padding-top")||0,10)-parseInt(ee(a,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function s(e,s){return parseFloat(e.getPropertyValue(t(s))||0)}const a=e.params,{wrapperEl:r,slidesEl:i,size:n,rtlTranslate:l,wrongRTL:o}=e,d=e.virtual&&a.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,p=Z(i,`.${e.params.slideClass}, swiper-slide`),u=d?e.virtual.slides.length:p.length;let m=[];const h=[],f=[];let g=a.slidesOffsetBefore;"function"==typeof g&&(g=a.slidesOffsetBefore.call(e));let v=a.slidesOffsetAfter;"function"==typeof v&&(v=a.slidesOffsetAfter.call(e));const w=e.snapGrid.length,y=e.slidesGrid.length;let b=a.spaceBetween,E=-g,x=0,S=0;if(void 0===n)return;"string"==typeof b&&b.indexOf("%")>=0&&(b=parseFloat(b.replace("%",""))/100*n),e.virtualSize=-b,p.forEach((e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),a.centeredSlides&&a.cssMode&&(W(r,"--swiper-centered-offset-before",""),W(r,"--swiper-centered-offset-after",""));const T=a.grid&&a.grid.rows>1&&e.grid;let M;T&&e.grid.initSlides(u);const C="auto"===a.slidesPerView&&a.breakpoints&&Object.keys(a.breakpoints).filter((e=>void 0!==a.breakpoints[e].slidesPerView)).length>0;for(let r=0;r<u;r+=1){let i;if(M=0,p[r]&&(i=p[r]),T&&e.grid.updateSlide(r,i,u,t),!p[r]||"none"!==ee(i,"display")){if("auto"===a.slidesPerView){C&&(p[r].style[t("width")]="");const n=getComputedStyle(i),l=i.style.transform,o=i.style.webkitTransform;if(l&&(i.style.transform="none"),o&&(i.style.webkitTransform="none"),a.roundLengths)M=e.isHorizontal()?re(i,"width",!0):re(i,"height",!0);else{const e=s(n,"width"),t=s(n,"padding-left"),a=s(n,"padding-right"),r=s(n,"margin-left"),l=s(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)M=e+r+l;else{const{clientWidth:s,offsetWidth:n}=i;M=e+t+a+r+l+(n-s)}}l&&(i.style.transform=l),o&&(i.style.webkitTransform=o),a.roundLengths&&(M=Math.floor(M))}else M=(n-(a.slidesPerView-1)*b)/a.slidesPerView,a.roundLengths&&(M=Math.floor(M)),p[r]&&(p[r].style[t("width")]=`${M}px`);p[r]&&(p[r].swiperSlideSize=M),f.push(M),a.centeredSlides?(E=E+M/2+x/2+b,0===x&&0!==r&&(E=E-n/2-b),0===r&&(E=E-n/2-b),Math.abs(E)<.001&&(E=0),a.roundLengths&&(E=Math.floor(E)),S%a.slidesPerGroup==0&&m.push(E),h.push(E)):(a.roundLengths&&(E=Math.floor(E)),(S-Math.min(e.params.slidesPerGroupSkip,S))%e.params.slidesPerGroup==0&&m.push(E),h.push(E),E=E+M+b),e.virtualSize+=M+b,x=M,S+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+v,l&&o&&("slide"===a.effect||"coverflow"===a.effect)&&(r.style.width=`${e.virtualSize+a.spaceBetween}px`),a.setWrapperSize&&(r.style[t("width")]=`${e.virtualSize+a.spaceBetween}px`),T&&e.grid.updateWrapperSize(M,m,t),!a.centeredSlides){const t=[];for(let s=0;s<m.length;s+=1){let r=m[s];a.roundLengths&&(r=Math.floor(r)),m[s]<=e.virtualSize-n&&t.push(r)}m=t,Math.floor(e.virtualSize-n)-Math.floor(m[m.length-1])>1&&m.push(e.virtualSize-n)}if(d&&a.loop){const t=f[0]+b;if(a.slidesPerGroup>1){const s=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/a.slidesPerGroup),r=t*a.slidesPerGroup;for(let e=0;e<s;e+=1)m.push(m[m.length-1]+r)}for(let s=0;s<e.virtual.slidesBefore+e.virtual.slidesAfter;s+=1)1===a.slidesPerGroup&&m.push(m[m.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===m.length&&(m=[0]),0!==a.spaceBetween){const s=e.isHorizontal()&&l?"marginLeft":t("marginRight");p.filter(((e,t)=>!(a.cssMode&&!a.loop)||t!==p.length-1)).forEach((e=>{e.style[s]=`${b}px`}))}if(a.centeredSlides&&a.centeredSlidesBounds){let e=0;f.forEach((t=>{e+=t+(a.spaceBetween?a.spaceBetween:0)})),e-=a.spaceBetween;const t=e-n;m=m.map((e=>e<0?-g:e>t?t+v:e))}if(a.centerInsufficientSlides){let e=0;if(f.forEach((t=>{e+=t+(a.spaceBetween?a.spaceBetween:0)})),e-=a.spaceBetween,e<n){const t=(n-e)/2;m.forEach(((e,s)=>{m[s]=e-t})),h.forEach(((e,s)=>{h[s]=e+t}))}}if(Object.assign(e,{slides:p,snapGrid:m,slidesGrid:h,slidesSizesGrid:f}),a.centeredSlides&&a.cssMode&&!a.centeredSlidesBounds){W(r,"--swiper-centered-offset-before",-m[0]+"px"),W(r,"--swiper-centered-offset-after",e.size/2-f[f.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(u!==c&&e.emit("slidesLengthChange"),m.length!==w&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==y&&e.emit("slidesGridLengthChange"),a.watchSlidesProgress&&e.updateSlidesOffset(),!(d||a.cssMode||"slide"!==a.effect&&"fade"!==a.effect)){const t=`${a.containerModifierClass}backface-hidden`,s=e.el.classList.contains(t);u<=a.maxBackfaceHiddenSlides?s||e.el.classList.add(t):s&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],a=t.virtual&&t.params.virtual.enabled;let r,i=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>a?t.getSlideIndexByData(e):t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length&&!a)break;s.push(n(e))}else s.push(n(t.activeIndex));for(r=0;r<s.length;r+=1)if(void 0!==s[r]){const e=s[r].offsetHeight;i=e>i?e:i}(i||0===i)&&(t.wrapperEl.style.height=`${i}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let a=0;a<t.length;a+=1)t[a].swiperSlideOffset=(e.isHorizontal()?t[a].offsetLeft:t[a].offsetTop)-s-e.cssOverflowAdjustment()},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,s=t.params,{slides:a,rtlTranslate:r,snapGrid:i}=t;if(0===a.length)return;void 0===a[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;r&&(n=e),a.forEach((e=>{e.classList.remove(s.slideVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<a.length;e+=1){const l=a[e];let o=l.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(o-=a[0].swiperSlideOffset);const d=(n+(s.centeredSlides?t.minTranslate():0)-o)/(l.swiperSlideSize+s.spaceBetween),c=(n-i[0]+(s.centeredSlides?t.minTranslate():0)-o)/(l.swiperSlideSize+s.spaceBetween),p=-(n-o),u=p+t.slidesSizesGrid[e];(p>=0&&p<t.size-1||u>1&&u<=t.size||p<=0&&u>=t.size)&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e),a[e].classList.add(s.slideVisibleClass)),l.progress=r?-d:d,l.originalProgress=r?-c:c}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,a=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:i,isEnd:n,progressLoop:l}=t;const o=i,d=n;if(0===a)r=0,i=!0,n=!0;else{r=(e-t.minTranslate())/a;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;i=s||r<=0,n=l||r>=1,s&&(r=0),l&&(r=1)}if(s.loop){const s=t.getSlideIndexByData(0),a=t.getSlideIndexByData(t.slides.length-1),r=t.slidesGrid[s],i=t.slidesGrid[a],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=r?(o-r)/n:(o+n-i)/n,l>1&&(l-=1)}Object.assign(t,{progress:r,progressLoop:l,isBeginning:i,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),i&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!i||d&&!n)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:a,activeIndex:r}=e,i=e.virtual&&s.virtual.enabled,n=e=>Z(a,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let l;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),i)if(s.loop){let t=r-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=n(`[data-swiper-slide-index="${t}"]`)}else l=n(`[data-swiper-slide-index="${r}"]`);else l=t[r];if(l){l.classList.add(s.slideActiveClass);let e=function(e,t){const s=[];for(;e.nextElementSibling;){const a=e.nextElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}(l,`.${s.slideClass}, swiper-slide`)[0];s.loop&&!e&&(e=t[0]),e&&e.classList.add(s.slideNextClass);let a=function(e,t){const s=[];for(;e.previousElementSibling;){const a=e.previousElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}(l,`.${s.slideClass}, swiper-slide`)[0];s.loop&&0===!a&&(a=t[t.length-1]),a&&a.classList.add(s.slidePrevClass)}e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:a,params:r,activeIndex:i,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,a=e.rtlTranslate?e.translate:-e.translate;let r;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?a>=t[e]&&a<t[e+1]-(t[e+1]-t[e])/2?r=e:a>=t[e]&&a<t[e+1]&&(r=e+1):a>=t[e]&&(r=e);return s.normalizeSlideIndex&&(r<0||void 0===r)&&(r=0),r}(t)),a.indexOf(s)>=0)o=a.indexOf(s);else{const e=Math.min(r.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/r.slidesPerGroup)}if(o>=a.length&&(o=a.length-1),d===i)return o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")),void(t.params.loop&&t.virtual&&t.params.virtual.enabled&&(t.realIndex=c(d)));let p;p=t.virtual&&r.virtual.enabled&&r.loop?c(d):t.slides[d]?parseInt(t.slides[d].getAttribute("data-swiper-slide-index")||d,10):d,Object.assign(t,{previousSnapIndex:l,snapIndex:o,previousRealIndex:n,realIndex:p,previousIndex:i,activeIndex:d}),t.initialized&&ue(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),n!==p&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,s=t.params,a=e.closest(`.${s.slideClass}, swiper-slide`);let r,i=!1;if(a)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===a){i=!0,r=e;break}if(!a||!i)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=a,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(a.getAttribute("data-swiper-slide-index"),10):t.clickedIndex=r,s.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};function he({swiper:e,runCallbacks:t,direction:s,step:a}){const{activeIndex:r,previousIndex:i}=e;let n=s;if(n||(n=r>i?"next":r<i?"prev":"reset"),e.emit(`transition${a}`),t&&r!==i){if("reset"===n)return void e.emit(`slideResetTransition${a}`);e.emit(`slideChangeTransition${a}`),"next"===n?e.emit(`slideNextTransition${a}`):e.emit(`slidePrevTransition${a}`)}}var fe={slideTo:function(e=0,t=this.params.speed,s=!0,a,r){"string"==typeof e&&(e=parseInt(e,10));const i=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:m,enabled:h}=i;if(i.animating&&l.preventInteractionOnTransition||!h&&!a&&!r)return!1;const f=Math.min(i.params.slidesPerGroupSkip,n);let g=f+Math.floor((n-f)/i.params.slidesPerGroup);g>=o.length&&(g=o.length-1);const v=-o[g];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*v),s=Math.floor(100*d[e]),a=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<a-(a-s)/2?n=e:t>=s&&t<a&&(n=e+1):t>=s&&(n=e)}if(i.initialized&&n!==p){if(!i.allowSlideNext&&v<i.translate&&v<i.minTranslate())return!1;if(!i.allowSlidePrev&&v>i.translate&&v>i.maxTranslate()&&(p||0)!==n)return!1}let w;if(n!==(c||0)&&s&&i.emit("beforeSlideChangeStart"),i.updateProgress(v),w=n>p?"next":n<p?"prev":"reset",u&&-v===i.translate||!u&&v===i.translate)return i.updateActiveIndex(n),l.autoHeight&&i.updateAutoHeight(),i.updateSlidesClasses(),"slide"!==l.effect&&i.setTranslate(v),"reset"!==w&&(i.transitionStart(s,w),i.transitionEnd(s,w)),!1;if(l.cssMode){const e=i.isHorizontal(),s=u?v:-v;if(0===t){const t=i.virtual&&i.params.virtual.enabled;t&&(i.wrapperEl.style.scrollSnapType="none",i._immediateVirtual=!0),t&&!i._cssModeVirtualInitialSet&&i.params.initialSlide>0?(i._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{m[e?"scrollLeft":"scrollTop"]=s}))):m[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{i.wrapperEl.style.scrollSnapType="",i._immediateVirtual=!1}))}else{if(!i.support.smoothScroll)return U({swiper:i,targetPosition:s,side:e?"left":"top"}),!0;m.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return i.setTransition(t),i.setTranslate(v),i.updateActiveIndex(n),i.updateSlidesClasses(),i.emit("beforeTransitionStart",t,a),i.transitionStart(s,w),0===t?i.transitionEnd(s,w):i.animating||(i.animating=!0,i.onSlideToWrapperTransitionEnd||(i.onSlideToWrapperTransitionEnd=function(e){i&&!i.destroyed&&e.target===this&&(i.wrapperEl.removeEventListener("transitionend",i.onSlideToWrapperTransitionEnd),i.onSlideToWrapperTransitionEnd=null,delete i.onSlideToWrapperTransitionEnd,i.transitionEnd(s,w))}),i.wrapperEl.addEventListener("transitionend",i.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e=0,t=this.params.speed,s=!0,a){"string"==typeof e&&(e=parseInt(e,10));const r=this;let i=e;return r.params.loop&&(r.virtual&&r.params.virtual.enabled?i+=r.virtual.slidesBefore:i=r.getSlideIndexByData(i)),r.slideTo(i,t,s,a)},slideNext:function(e=this.params.speed,t=!0,s){const a=this,{enabled:r,params:i,animating:n}=a;if(!r)return a;let l=i.slidesPerGroup;"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(l=Math.max(a.slidesPerViewDynamic("current",!0),1));const o=a.activeIndex<i.slidesPerGroupSkip?1:l,d=a.virtual&&i.virtual.enabled;if(i.loop){if(n&&!d&&i.loopPreventsSliding)return!1;a.loopFix({direction:"next"}),a._clientLeft=a.wrapperEl.clientLeft}return i.rewind&&a.isEnd?a.slideTo(0,e,t,s):a.slideTo(a.activeIndex+o,e,t,s)},slidePrev:function(e=this.params.speed,t=!0,s){const a=this,{params:r,snapGrid:i,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=a;if(!o)return a;const c=a.virtual&&r.virtual.enabled;if(r.loop){if(d&&!c&&r.loopPreventsSliding)return!1;a.loopFix({direction:"prev"}),a._clientLeft=a.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?a.translate:-a.translate),m=i.map((e=>p(e)));let h=i[m.indexOf(u)-1];if(void 0===h&&r.cssMode){let e;i.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(h=i[e>0?e-1:e])}let f=0;if(void 0!==h&&(f=n.indexOf(h),f<0&&(f=a.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(f=f-a.slidesPerViewDynamic("previous",!0)+1,f=Math.max(f,0))),r.rewind&&a.isBeginning){const r=a.params.virtual&&a.params.virtual.enabled&&a.virtual?a.virtual.slides.length-1:a.slides.length-1;return a.slideTo(r,e,t,s)}return a.slideTo(f,e,t,s)},slideReset:function(e=this.params.speed,t=!0,s){return this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e=this.params.speed,t=!0,s,a=.5){const r=this;let i=r.activeIndex;const n=Math.min(r.params.slidesPerGroupSkip,i),l=n+Math.floor((i-n)/r.params.slidesPerGroup),o=r.rtlTranslate?r.translate:-r.translate;if(o>=r.snapGrid[l]){const e=r.snapGrid[l];o-e>(r.snapGrid[l+1]-e)*a&&(i+=r.params.slidesPerGroup)}else{const e=r.snapGrid[l-1];o-e<=(r.snapGrid[l]-e)*a&&(i-=r.params.slidesPerGroup)}return i=Math.max(i,0),i=Math.min(i,r.slidesGrid.length-1),r.slideTo(i,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,a="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,i=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;r=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?i<e.loopedSlides-a/2||i>e.slides.length-e.loopedSlides+a/2?(e.loopFix(),i=e.getSlideIndex(Z(s,`${n}[data-swiper-slide-index="${r}"]`)[0]),q((()=>{e.slideTo(i)}))):e.slideTo(i):i>e.slides.length-a?(e.loopFix(),i=e.getSlideIndex(Z(s,`${n}[data-swiper-slide-index="${r}"]`)[0]),q((()=>{e.slideTo(i)}))):e.slideTo(i)}else e.slideTo(i)}};function ge(e){const t=this,s=X(),a=N(),r=t.touchEventsData;r.evCache.push(e);const{params:i,touches:n,enabled:l}=t;if(!l)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;if(t.animating&&i.preventInteractionOnTransition)return;!t.animating&&i.cssMode&&i.loop&&t.loopFix();let o=e;o.originalEvent&&(o=o.originalEvent);let d=o.target;if("wrapper"===i.touchEventsTarget&&!t.wrapperEl.contains(d))return;if("which"in o&&3===o.which)return;if("button"in o&&o.button>0)return;if(r.isTouched&&r.isMoved)return;const c=!!i.noSwipingClass&&""!==i.noSwipingClass,p=e.composedPath?e.composedPath():e.path;c&&o.target&&o.target.shadowRoot&&p&&(d=p[0]);const u=i.noSwipingSelector?i.noSwipingSelector:`.${i.noSwipingClass}`,m=!(!o.target||!o.target.shadowRoot);if(i.noSwiping&&(m?function(e,t=this){return function t(s){if(!s||s===X()||s===N())return null;s.assignedSlot&&(s=s.assignedSlot);const a=s.closest(e);return a||s.getRootNode?a||t(s.getRootNode().host):null}(t)}(u,d):d.closest(u)))return void(t.allowClick=!0);if(i.swipeHandler&&!d.closest(i.swipeHandler))return;n.currentX=o.pageX,n.currentY=o.pageY;const h=n.currentX,f=n.currentY,g=i.edgeSwipeDetection||i.iOSEdgeSwipeDetection,v=i.edgeSwipeThreshold||i.iOSEdgeSwipeThreshold;if(g&&(h<=v||h>=a.innerWidth-v)){if("prevent"!==g)return;e.preventDefault()}Object.assign(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),n.startX=h,n.startY=f,r.touchStartTime=j(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,i.threshold>0&&(r.allowThresholdMove=!1);let w=!0;d.matches(r.focusableElements)&&(w=!1,"SELECT"===d.nodeName&&(r.isTouched=!1)),s.activeElement&&s.activeElement.matches(r.focusableElements)&&s.activeElement!==d&&s.activeElement.blur();const y=w&&t.allowTouchMove&&i.touchStartPreventDefault;!i.touchStartForcePreventDefault&&!y||d.isContentEditable||o.preventDefault(),t.params.freeMode&&t.params.freeMode.enabled&&t.freeMode&&t.animating&&!i.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",o)}function ve(e){const t=X(),s=this,a=s.touchEventsData,{params:r,touches:i,rtlTranslate:n,enabled:l}=s;if(!l)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let o=e;if(o.originalEvent&&(o=o.originalEvent),!a.isTouched)return void(a.startMoving&&a.isScrolling&&s.emit("touchMoveOpposite",o));const d=a.evCache.findIndex((e=>e.pointerId===o.pointerId));d>=0&&(a.evCache[d]=o);const c=a.evCache.length>1?a.evCache[0]:o,p=c.pageX,u=c.pageY;if(o.preventedByNestedSwiper)return i.startX=p,void(i.startY=u);if(!s.allowTouchMove)return o.target.matches(a.focusableElements)||(s.allowClick=!1),void(a.isTouched&&(Object.assign(i,{startX:p,startY:u,prevX:s.touches.currentX,prevY:s.touches.currentY,currentX:p,currentY:u}),a.touchStartTime=j()));if(r.touchReleaseOnEdges&&!r.loop)if(s.isVertical()){if(u<i.startY&&s.translate<=s.maxTranslate()||u>i.startY&&s.translate>=s.minTranslate())return a.isTouched=!1,void(a.isMoved=!1)}else if(p<i.startX&&s.translate<=s.maxTranslate()||p>i.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&o.target===t.activeElement&&o.target.matches(a.focusableElements))return a.isMoved=!0,void(s.allowClick=!1);if(a.allowTouchCallbacks&&s.emit("touchMove",o),o.targetTouches&&o.targetTouches.length>1)return;i.currentX=p,i.currentY=u;const m=i.currentX-i.startX,h=i.currentY-i.startY;if(s.params.threshold&&Math.sqrt(m**2+h**2)<s.params.threshold)return;if(void 0===a.isScrolling){let e;s.isHorizontal()&&i.currentY===i.startY||s.isVertical()&&i.currentX===i.startX?a.isScrolling=!1:m*m+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(m))/Math.PI,a.isScrolling=s.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(a.isScrolling&&s.emit("touchMoveOpposite",o),void 0===a.startMoving&&(i.currentX===i.startX&&i.currentY===i.startY||(a.startMoving=!0)),a.isScrolling||s.zoom&&s.params.zoom&&s.params.zoom.enabled&&a.evCache.length>1)return void(a.isTouched=!1);if(!a.startMoving)return;s.allowClick=!1,!r.cssMode&&o.cancelable&&o.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&o.stopPropagation();let f=s.isHorizontal()?m:h,g=s.isHorizontal()?i.currentX-i.previousX:i.currentY-i.previousY;r.oneWayMovement&&(f=Math.abs(f)*(n?1:-1),g=Math.abs(g)*(n?1:-1)),i.diff=f,f*=r.touchRatio,n&&(f=-f,g=-g);const v=s.touchesDirection;s.swipeDirection=f>0?"prev":"next",s.touchesDirection=g>0?"prev":"next";const w=s.params.loop&&!r.cssMode;if(!a.isMoved){if(w&&s.loopFix({direction:s.swipeDirection}),a.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}a.allowMomentumBounce=!1,!r.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",o)}let y;a.isMoved&&v!==s.touchesDirection&&w&&Math.abs(f)>=1&&(s.loopFix({direction:s.swipeDirection,setTranslate:!0}),y=!0),s.emit("sliderMove",o),a.isMoved=!0,a.currentTranslate=f+a.startTranslate;let b=!0,E=r.resistanceRatio;if(r.touchReleaseOnEdges&&(E=0),f>0?(w&&!y&&a.currentTranslate>(r.centeredSlides?s.minTranslate()-s.size/2:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),a.currentTranslate>s.minTranslate()&&(b=!1,r.resistance&&(a.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+a.startTranslate+f)**E))):f<0&&(w&&!y&&a.currentTranslate<(r.centeredSlides?s.maxTranslate()+s.size/2:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===r.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(r.slidesPerView,10)))}),a.currentTranslate<s.maxTranslate()&&(b=!1,r.resistance&&(a.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-a.startTranslate-f)**E))),b&&(o.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&a.currentTranslate<a.startTranslate&&(a.currentTranslate=a.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&a.currentTranslate>a.startTranslate&&(a.currentTranslate=a.startTranslate),s.allowSlidePrev||s.allowSlideNext||(a.currentTranslate=a.startTranslate),r.threshold>0){if(!(Math.abs(f)>r.threshold||a.allowThresholdMove))return void(a.currentTranslate=a.startTranslate);if(!a.allowThresholdMove)return a.allowThresholdMove=!0,i.startX=i.currentX,i.startY=i.currentY,a.currentTranslate=a.startTranslate,void(i.diff=s.isHorizontal()?i.currentX-i.startX:i.currentY-i.startY)}r.followFinger&&!r.cssMode&&((r.freeMode&&r.freeMode.enabled&&s.freeMode||r.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),s.params.freeMode&&r.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(a.currentTranslate),s.setTranslate(a.currentTranslate))}function we(e){const t=this,s=t.touchEventsData,a=s.evCache.findIndex((t=>t.pointerId===e.pointerId));if(a>=0&&s.evCache.splice(a,1),["pointercancel","pointerout","pointerleave"].includes(e.type)&&("pointercancel"!==e.type||!t.browser.isSafari&&!t.browser.isWebView))return;const{params:r,touches:i,rtlTranslate:n,slidesGrid:l,enabled:o}=t;if(!o)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;let d=e;if(d.originalEvent&&(d=d.originalEvent),s.allowTouchCallbacks&&t.emit("touchEnd",d),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&r.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);r.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=j(),p=c-s.touchStartTime;if(t.allowClick){const e=d.path||d.composedPath&&d.composedPath();t.updateClickedSlide(e&&e[0]||d.target),t.emit("tap click",d),p<300&&c-s.lastClickTime<300&&t.emit("doubleTap doubleClick",d)}if(s.lastClickTime=j(),q((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===i.diff||s.currentTranslate===s.startTranslate)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let u;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,u=r.followFinger?n?t.translate:-t.translate:-s.currentTranslate,r.cssMode)return;if(t.params.freeMode&&r.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:u});let m=0,h=t.slidesSizesGrid[0];for(let e=0;e<l.length;e+=e<r.slidesPerGroupSkip?1:r.slidesPerGroup){const t=e<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==l[e+t]?u>=l[e]&&u<l[e+t]&&(m=e,h=l[e+t]-l[e]):u>=l[e]&&(m=e,h=l[l.length-1]-l[l.length-2])}let f=null,g=null;r.rewind&&(t.isBeginning?g=t.params.virtual&&t.params.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(f=0));const v=(u-l[m])/h,w=m<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(p>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(v>=r.longSwipesRatio?t.slideTo(r.rewind&&t.isEnd?f:m+w):t.slideTo(m)),"prev"===t.swipeDirection&&(v>1-r.longSwipesRatio?t.slideTo(m+w):null!==g&&v<0&&Math.abs(v)>r.longSwipesRatio?t.slideTo(g):t.slideTo(m))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||d.target!==t.navigation.nextEl&&d.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==f?f:m+w),"prev"===t.swipeDirection&&t.slideTo(null!==g?g:m)):d.target===t.navigation.nextEl?t.slideTo(m+w):t.slideTo(m)}}function ye(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:a,allowSlidePrev:r,snapGrid:i}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=r,e.allowSlideNext=a,e.params.watchOverflow&&i!==e.snapGrid&&e.checkOverflow()}function be(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Ee(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:a}=e;if(!a)return;let r;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const i=e.maxTranslate()-e.minTranslate();r=0===i?0:(e.translate-e.minTranslate())/i,r!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function xe(e){ce(this,e.target),this.update()}let Se=!1;function Te(){}const Me=(e,t)=>{const s=X(),{params:a,el:r,wrapperEl:i,device:n}=e,l=!!a.nested,o="on"===t?"addEventListener":"removeEventListener",d=t;r[o]("pointerdown",e.onTouchStart,{passive:!1}),s[o]("pointermove",e.onTouchMove,{passive:!1,capture:l}),s[o]("pointerup",e.onTouchEnd,{passive:!0}),s[o]("pointercancel",e.onTouchEnd,{passive:!0}),s[o]("pointerout",e.onTouchEnd,{passive:!0}),s[o]("pointerleave",e.onTouchEnd,{passive:!0}),(a.preventClicks||a.preventClicksPropagation)&&r[o]("click",e.onClick,!0),a.cssMode&&i[o]("scroll",e.onScroll),a.updateOnWindowResize?e[d](n.ios||n.android?"resize orientationchange observerUpdate":"resize observerUpdate",ye,!0):e[d]("observerUpdate",ye,!0),r[o]("load",e.onLoad,{capture:!0})},Ce=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var Le={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopedSlides:null,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Pe(e,t){return function(s={}){const a=Object.keys(s)[0],r=s[a];"object"==typeof r&&null!==r?(["navigation","pagination","scrollbar"].indexOf(a)>=0&&!0===e[a]&&(e[a]={auto:!0}),a in e&&"enabled"in r?(!0===e[a]&&(e[a]={enabled:!0}),"object"!=typeof e[a]||"enabled"in e[a]||(e[a].enabled=!0),e[a]||(e[a]={enabled:!1}),F(t,s)):F(t,s)):F(t,s)}}const ke={eventsEmitter:de,update:me,translate:{getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:s,translate:a,wrapperEl:r}=this;if(t.virtualTranslate)return s?-a:a;if(t.cssMode)return a;let i=R(r,e);return i+=this.cssOverflowAdjustment(),s&&(i=-i),i||0},setTranslate:function(e,t){const s=this,{rtlTranslate:a,params:r,wrapperEl:i,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=a?-e:e:d=e,r.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d,r.cssMode?i[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:r.virtualTranslate||(s.isHorizontal()?o-=s.cssOverflowAdjustment():d-=s.cssOverflowAdjustment(),i.style.transform=`translate3d(${o}px, ${d}px, 0px)`);const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e=0,t=this.params.speed,s=!0,a=!0,r){const i=this,{params:n,wrapperEl:l}=i;if(i.animating&&n.preventInteractionOnTransition)return!1;const o=i.minTranslate(),d=i.maxTranslate();let c;if(c=a&&e>o?o:a&&e<d?d:e,i.updateProgress(c),n.cssMode){const e=i.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!i.support.smoothScroll)return U({swiper:i,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(i.setTransition(0),i.setTranslate(c),s&&(i.emit("beforeTransitionStart",t,r),i.emit("transitionEnd"))):(i.setTransition(t),i.setTranslate(c),s&&(i.emit("beforeTransitionStart",t,r),i.emit("transitionStart")),i.animating||(i.animating=!0,i.onTranslateToWrapperTransitionEnd||(i.onTranslateToWrapperTransitionEnd=function(e){i&&!i.destroyed&&e.target===this&&(i.wrapperEl.removeEventListener("transitionend",i.onTranslateToWrapperTransitionEnd),i.onTranslateToWrapperTransitionEnd=null,delete i.onTranslateToWrapperTransitionEnd,s&&i.emit("transitionEnd"))}),i.wrapperEl.addEventListener("transitionend",i.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`),s.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const s=this,{params:a}=s;a.cssMode||(a.autoHeight&&s.updateAutoHeight(),he({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e=!0,t){const s=this,{params:a}=s;s.animating=!1,a.cssMode||(s.setTransition(0),he({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:fe,loop:{loopCreate:function(e){const t=this,{params:s,slidesEl:a}=t;!s.loop||t.virtual&&t.params.virtual.enabled||(Z(a,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)})),t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"}))},loopFix:function({slideRealIndex:e,slideTo:t=!0,direction:s,setTranslate:a,activeSlideIndex:r,byController:i,byMousewheel:n}={}){const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:o,allowSlidePrev:d,allowSlideNext:c,slidesEl:p,params:u}=l;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&u.virtual.enabled)return t&&(u.centeredSlides||0!==l.snapIndex?u.centeredSlides&&l.snapIndex<u.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=c,void l.emit("loopFix");const m="auto"===u.slidesPerView?l.slidesPerViewDynamic():Math.ceil(parseFloat(u.slidesPerView,10));let h=u.loopedSlides||m;h%u.slidesPerGroup!=0&&(h+=u.slidesPerGroup-h%u.slidesPerGroup),l.loopedSlides=h;const f=[],g=[];let v=l.activeIndex;void 0===r?r=l.getSlideIndex(l.slides.filter((e=>e.classList.contains(u.slideActiveClass)))[0]):v=r;const w="next"===s||!s,y="prev"===s||!s;let b=0,E=0;if(r<h){b=Math.max(h-r,u.slidesPerGroup);for(let e=0;e<h-r;e+=1){const t=e-Math.floor(e/o.length)*o.length;f.push(o.length-t-1)}}else if(r>l.slides.length-2*h){E=Math.max(r-(l.slides.length-2*h),u.slidesPerGroup);for(let e=0;e<E;e+=1){const t=e-Math.floor(e/o.length)*o.length;g.push(t)}}if(y&&f.forEach((e=>{p.prepend(l.slides[e])})),w&&g.forEach((e=>{p.append(l.slides[e])})),l.recalcSlides(),u.watchSlidesProgress&&l.updateSlidesOffset(),t)if(f.length>0&&y)if(void 0===e){const e=l.slidesGrid[v],t=l.slidesGrid[v+b]-e;n?l.setTranslate(l.translate-t):(l.slideTo(v+b,0,!1,!0),a&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t))}else a&&l.slideToLoop(e,0,!1,!0);else if(g.length>0&&w)if(void 0===e){const e=l.slidesGrid[v],t=l.slidesGrid[v-E]-e;n?l.setTranslate(l.translate-t):(l.slideTo(v-E,0,!1,!0),a&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t))}else l.slideToLoop(e,0,!1,!0);if(l.allowSlidePrev=d,l.allowSlideNext=c,l.controller&&l.controller.control&&!i){const t={slideRealIndex:e,slideTo:!1,direction:s,setTranslate:a,activeSlideIndex:r,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((e=>{!e.destroyed&&e.params.loop&&e.loopFix(t)})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix(t)}l.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const a=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;a[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),a.forEach((e=>{s.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,t=X(),{params:s}=e;e.onTouchStart=ge.bind(e),e.onTouchMove=ve.bind(e),e.onTouchEnd=we.bind(e),s.cssMode&&(e.onScroll=Ee.bind(e)),e.onClick=be.bind(e),e.onLoad=xe.bind(e),Se||(t.addEventListener("touchstart",Te),Se=!0),Me(e,"on")},detachEvents:function(){Me(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:a,el:r}=e,i=a.breakpoints;if(!i||i&&0===Object.keys(i).length)return;const n=e.getBreakpoint(i,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const l=(n in i?i[n]:void 0)||e.originalParams,o=Ce(e,a),d=Ce(e,l),c=a.enabled;o&&!d?(r.classList.remove(`${a.containerModifierClass}grid`,`${a.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&d&&(r.classList.add(`${a.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===a.grid.fill)&&r.classList.add(`${a.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{const s=a[t]&&a[t].enabled,r=l[t]&&l[t].enabled;s&&!r&&e[t].disable(),!s&&r&&e[t].enable()}));const p=l.direction&&l.direction!==a.direction,u=a.loop&&(l.slidesPerView!==a.slidesPerView||p);p&&s&&e.changeDirection(),F(e.params,l);const m=e.params.enabled;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),c&&!m?e.disable():!c&&m&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",l),u&&s&&(e.loopDestroy(),e.loopCreate(t),e.updateSlides()),e.emit("breakpoint",l)},getBreakpoint:function(e,t="window",s){if(!e||"container"===t&&!s)return;let a=!1;const r=N(),i="window"===t?r.innerHeight:s.clientHeight,n=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:i*t,point:e}}return{value:e,point:e}}));n.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<n.length;e+=1){const{point:i,value:l}=n[e];"window"===t?r.matchMedia(`(min-width: ${l}px)`).matches&&(a=i):l<=s.clientWidth&&(a=i)}return a||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:a}=s;if(a){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*a;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:a,el:r,device:i}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((a=>{e[a]&&s.push(t+a)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:a},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:i.android},{ios:i.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),r.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},Ae={};class ze{constructor(...e){let t,s;1===e.length&&e[0].constructor&&"Object"===Object.prototype.toString.call(e[0]).slice(8,-1)?s=e[0]:[t,s]=e,s||(s={}),s=F({},s),t&&!s.el&&(s.el=t);const a=X();if(s.el&&"string"==typeof s.el&&a.querySelectorAll(s.el).length>1){const e=[];return a.querySelectorAll(s.el).forEach((t=>{const a=F({},s,{el:t});e.push(new ze(a))})),e}const r=this;r.__swiper__=!0,r.support=oe(),r.device=function(e={}){return ne||(ne=function({userAgent:e}={}){const t=oe(),s=N(),a=s.navigator.platform,r=e||s.navigator.userAgent,i={ios:!1,android:!1},n=s.screen.width,l=s.screen.height,o=r.match(/(Android);?[\s\/]+([\d.]+)?/);let d=r.match(/(iPad).*OS\s([\d_]+)/);const c=r.match(/(iPod)(.*OS\s([\d_]+))?/),p=!d&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),u="Win32"===a;let m="MacIntel"===a;return!d&&m&&t.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${n}x${l}`)>=0&&(d=r.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),m=!1),o&&!u&&(i.os="android",i.android=!0),(d||p||c)&&(i.os="ios",i.ios=!0),i}(e)),ne}({userAgent:s.userAgent}),r.browser=(le||(le=function(){const e=N();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,a]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&a<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),le),r.eventsListeners={},r.eventsAnyListeners=[],r.modules=[...r.__modules__],s.modules&&Array.isArray(s.modules)&&r.modules.push(...s.modules);const i={};r.modules.forEach((e=>{e({params:s,swiper:r,extendParams:Pe(s,i),on:r.on.bind(r),once:r.once.bind(r),off:r.off.bind(r),emit:r.emit.bind(r)})}));const n=F({},Le,i);return r.params=F({},n,Ae,s),r.originalParams=F({},r.params),r.passedParams=F({},s),r.params&&r.params.on&&Object.keys(r.params.on).forEach((e=>{r.on(e,r.params.on[e])})),r.params&&r.params.onAny&&r.onAny(r.params.onAny),Object.assign(r,{enabled:r.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return"horizontal"===r.params.direction},isVertical(){return"vertical"===r.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:r.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,evCache:[]},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.emit("_swiper"),r.params.init&&r.init(),r}getSlideIndex(e){const{slidesEl:t,params:s}=this,a=te(Z(t,`.${s.slideClass}, swiper-slide`)[0]);return te(e)-a}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter((t=>1*t.getAttribute("data-swiper-slide-index")===e))[0])}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=Z(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const a=s.minTranslate(),r=(s.maxTranslate()-a)*e+a;s.translateTo(r,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const a=e.getSlideClasses(s);t.push({slideEl:s,classNames:a}),e.emit("_slideClass",s,a)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e="current",t=!1){const{params:s,slides:a,slidesGrid:r,slidesSizesGrid:i,size:n,activeIndex:l}=this;let o=1;if(s.centeredSlides){let e,t=a[l].swiperSlideSize;for(let s=l+1;s<a.length;s+=1)a[s]&&!e&&(t+=a[s].swiperSlideSize,o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)a[s]&&!e&&(t+=a[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<a.length;e+=1)(t?r[e]+i[e]-r[l]<n:r[e]-r[l]<n)&&(o+=1);else for(let e=l-1;e>=0;e-=1)r[l]-r[e]<n&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function a(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let r;s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&ce(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode&&e.params.freeMode.enabled?(a(),e.params.autoHeight&&e.updateAutoHeight()):(r=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),r||a()),s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const s=this,a=s.params.direction;return e||(e="horizontal"===a?"vertical":"horizontal"),e===a||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${a}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.shadowEl&&(t.isElement=!0);const a=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let r=s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(a()):Z(s,a())[0];return!r&&t.params.createElements&&(r=Q("div",t.params.wrapperClass),s.append(r),Z(s,`.${t.params.slideClass}`).forEach((e=>{r.append(e)}))),Object.assign(t,{el:s,wrapperEl:r,slidesEl:t.isElement?s:r,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===ee(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===ee(s,"direction")),wrongRTL:"-webkit-box"===ee(r,"display")}),!0}init(e){const t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach((e=>{e.complete?ce(t,e):e.addEventListener("load",(e=>{ce(t,e.target)}))})),ue(t),t.initialized=!0,ue(t),t.emit("init"),t.emit("afterInit")),t}destroy(e=!0,t=!0){const s=this,{params:a,el:r,wrapperEl:i,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),a.loop&&s.loopDestroy(),t&&(s.removeClasses(),r.removeAttribute("style"),i.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(a.slideVisibleClass,a.slideActiveClass,a.slideNextClass,a.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){F(Ae,e)}static get extendedDefaults(){return Ae}static get defaults(){return Le}static installModule(e){ze.prototype.__modules__||(ze.prototype.__modules__=[]);const t=ze.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>ze.installModule(e))),ze):(ze.installModule(e),ze)}}Object.keys(ke).forEach((e=>{Object.keys(ke[e]).forEach((t=>{ze.prototype[t]=ke[e][t]}))})),ze.use([function({swiper:e,on:t,emit:s}){const a=N();let r=null,i=null;const n=()=>{e&&!e.destroyed&&e.initialized&&(s("beforeResize"),s("resize"))},l=()=>{e&&!e.destroyed&&e.initialized&&s("orientationchange")};t("init",(()=>{e.params.resizeObserver&&void 0!==a.ResizeObserver?e&&!e.destroyed&&e.initialized&&(r=new ResizeObserver((t=>{i=a.requestAnimationFrame((()=>{const{width:s,height:a}=e;let r=s,i=a;t.forEach((({contentBoxSize:t,contentRect:s,target:a})=>{a&&a!==e.el||(r=s?s.width:(t[0]||t).inlineSize,i=s?s.height:(t[0]||t).blockSize)})),r===s&&i===a||n()}))})),r.observe(e.el)):(a.addEventListener("resize",n),a.addEventListener("orientationchange",l))})),t("destroy",(()=>{i&&a.cancelAnimationFrame(i),r&&r.unobserve&&e.el&&(r.unobserve(e.el),r=null),a.removeEventListener("resize",n),a.removeEventListener("orientationchange",l)}))},function({swiper:e,extendParams:t,on:s,emit:a}){const r=[],i=N(),n=(t,s={})=>{const n=new(i.MutationObserver||i.WebkitMutationObserver)((t=>{if(e.__preventObserver__)return;if(1===t.length)return void a("observerUpdate",t[0]);const s=function(){a("observerUpdate",t[0])};i.requestAnimationFrame?i.requestAnimationFrame(s):i.setTimeout(s,0)}));n.observe(t,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),r.push(n)};t({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",(()=>{if(e.params.observer){if(e.params.observeParents){const t=se(e.el);for(let e=0;e<t.length;e+=1)n(t[e])}n(e.el,{childList:e.params.observeSlideChildren}),n(e.wrapperEl,{attributes:!1})}})),s("destroy",(()=>{r.forEach((e=>{e.disconnect()})),r.splice(0,r.length)}))}]);var Ie=ze;function $e(e,t,s,a){return e.params.createElements&&Object.keys(a).forEach((r=>{if(!s[r]&&!0===s.auto){let i=Z(e.el,`.${a[r]}`)[0];i||(i=Q("div",a[r]),i.className=a[r],e.el.append(i)),s[r]=i,t[r]=i}})),s}function Oe(e=""){return`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function _e(e){const t=this,{params:s,slidesEl:a}=t;s.loop&&t.loopDestroy();const r=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,a.append(t.children[0]),t.innerHTML=""}else a.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&r(e[t]);else r(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update()}function De(e){const t=this,{params:s,activeIndex:a,slidesEl:r}=t;s.loop&&t.loopDestroy();let i=a+1;const n=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,r.prepend(t.children[0]),t.innerHTML=""}else r.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&n(e[t]);i=a+e.length}else n(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),t.slideTo(i,0,!1)}function Be(e,t){const s=this,{params:a,activeIndex:r,slidesEl:i}=s;let n=r;a.loop&&(n-=s.loopedSlides,s.loopDestroy(),s.recalcSlides());const l=s.slides.length;if(e<=0)return void s.prependSlide(t);if(e>=l)return void s.appendSlide(t);let o=n>e?n+1:n;const d=[];for(let t=l-1;t>=e;t-=1){const e=s.slides[t];e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&i.append(t[e]);o=n>e?n+t.length:n}else i.append(t);for(let e=0;e<d.length;e+=1)i.append(d[e]);s.recalcSlides(),a.loop&&s.loopCreate(),a.observer&&!s.isElement||s.update(),a.loop?s.slideTo(o+s.loopedSlides,0,!1):s.slideTo(o,0,!1)}function Ge(e){const t=this,{params:s,activeIndex:a}=t;let r=a;s.loop&&(r-=t.loopedSlides,t.loopDestroy());let i,n=r;if("object"==typeof e&&"length"in e){for(let s=0;s<e.length;s+=1)i=e[s],t.slides[i]&&t.slides[i].remove(),i<n&&(n-=1);n=Math.max(n,0)}else i=e,t.slides[i]&&t.slides[i].remove(),i<n&&(n-=1),n=Math.max(n,0);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),s.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)}function He(){const e=this,t=[];for(let s=0;s<e.slides.length;s+=1)t.push(s);e.removeSlide(t)}function Xe(e){const{effect:t,swiper:s,on:a,setTranslate:r,setTransition:i,overwriteParams:n,perspective:l,recreateShadows:o,getEffectParams:d}=e;let c;a("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),l&&l()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=n?n():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),a("setTranslate",(()=>{s.params.effect===t&&r()})),a("setTransition",((e,a)=>{s.params.effect===t&&i(a)})),a("transitionEnd",(()=>{if(s.params.effect===t&&o){if(!d||!d().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),a("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(c=!0),requestAnimationFrame((()=>{c&&s.slides&&s.slides.length&&(r(),c=!1)})))}))}function Ye(e,t){const s=K(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}function Ne({swiper:e,duration:t,transformElements:s,allSlides:a}){const{activeIndex:r}=e;if(e.params.virtualTranslate&&0!==t){let t,i=!1;t=a?s:s.filter((t=>{const s=t.classList.contains("swiper-slide-transform")?(t=>t.parentElement?t.parentElement:e.slides.filter((e=>e.shadowEl&&e.shadowEl===t.parentNode))[0])(t):t;return e.getSlideIndex(s)===r})),t.forEach((t=>{ae(t,(()=>{if(i)return;if(!e||e.destroyed)return;i=!0,e.animating=!1;const t=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});e.wrapperEl.dispatchEvent(t)}))}))}}function qe(e,t,s){const a="swiper-slide-shadow"+(s?`-${s}`:""),r=K(t);let i=r.querySelector(`.${a}`);return i||(i=Q("div","swiper-slide-shadow"+(s?`-${s}`:"")),r.append(i)),i}const je=[function({swiper:e,extendParams:t,on:s,emit:a}){let r;t({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const i=X();e.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const n=i.createElement("div");function l(t,s){const a=e.params.virtual;if(a.cache&&e.virtual.cache[s])return e.virtual.cache[s];let r;return a.renderSlide?(r=a.renderSlide.call(e,t,s),"string"==typeof r&&(n.innerHTML=r,r=n.children[0])):r=e.isElement?Q("swiper-slide"):Q("div",e.params.slideClass),r.setAttribute("data-swiper-slide-index",s),a.renderSlide||(r.innerHTML=t),a.cache&&(e.virtual.cache[s]=r),r}function o(t){const{slidesPerView:s,slidesPerGroup:r,centeredSlides:i,loop:n}=e.params,{addSlidesBefore:o,addSlidesAfter:d}=e.params.virtual,{from:c,to:p,slides:u,slidesGrid:m,offset:h}=e.virtual;e.params.cssMode||e.updateActiveIndex();const f=e.activeIndex||0;let g,v,w;g=e.rtlTranslate?"right":e.isHorizontal()?"left":"top",i?(v=Math.floor(s/2)+r+d,w=Math.floor(s/2)+r+o):(v=s+(r-1)+d,w=(n?s:r)+o);let y=f-w,b=f+v;n||(y=Math.max(y,0),b=Math.min(b,u.length-1));let E=(e.slidesGrid[y]||0)-(e.slidesGrid[0]||0);function x(){e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),a("virtualUpdate")}if(n&&f>=w?(y-=w,i||(E+=e.slidesGrid[0])):n&&f<w&&(y=-w,i&&(E+=e.slidesGrid[0])),Object.assign(e.virtual,{from:y,to:b,offset:E,slidesGrid:e.slidesGrid,slidesBefore:w,slidesAfter:v}),c===y&&p===b&&!t)return e.slidesGrid!==m&&E!==h&&e.slides.forEach((t=>{t.style[g]=E-Math.abs(e.cssOverflowAdjustment())+"px"})),e.updateProgress(),void a("virtualUpdate");if(e.params.virtual.renderExternal)return e.params.virtual.renderExternal.call(e,{offset:E,from:y,to:b,slides:function(){const e=[];for(let t=y;t<=b;t+=1)e.push(u[t]);return e}()}),void(e.params.virtual.renderExternalUpdate?x():a("virtualUpdate"));const S=[],T=[],M=e=>{let t=e;return e<0?t=u.length+e:t>=u.length&&(t-=u.length),t};if(t)e.slidesEl.querySelectorAll(`.${e.params.slideClass}, swiper-slide`).forEach((e=>{e.remove()}));else for(let t=c;t<=p;t+=1)if(t<y||t>b){const s=M(t);e.slidesEl.querySelectorAll(`.${e.params.slideClass}[data-swiper-slide-index="${s}"], swiper-slide[data-swiper-slide-index="${s}"]`).forEach((e=>{e.remove()}))}const C=n?-u.length:0,L=n?2*u.length:u.length;for(let e=C;e<L;e+=1)if(e>=y&&e<=b){const s=M(e);void 0===p||t?T.push(s):(e>p&&T.push(s),e<c&&S.push(s))}if(T.forEach((t=>{e.slidesEl.append(l(u[t],t))})),n)for(let t=S.length-1;t>=0;t-=1){const s=S[t];e.slidesEl.prepend(l(u[s],s))}else S.sort(((e,t)=>t-e)),S.forEach((t=>{e.slidesEl.prepend(l(u[t],t))}));Z(e.slidesEl,".swiper-slide, swiper-slide").forEach((t=>{t.style[g]=E-Math.abs(e.cssOverflowAdjustment())+"px"})),x()}s("beforeInit",(()=>{if(!e.params.virtual.enabled)return;let t;if(void 0===e.passedParams.virtual.slides){const s=[...e.slidesEl.children].filter((t=>t.matches(`.${e.params.slideClass}, swiper-slide`)));s&&s.length&&(e.virtual.slides=[...s],t=!0,s.forEach(((t,s)=>{t.setAttribute("data-swiper-slide-index",s),e.virtual.cache[s]=t,t.remove()})))}t||(e.virtual.slides=e.params.virtual.slides),e.classNames.push(`${e.params.containerModifierClass}virtual`),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0,e.params.initialSlide||o()})),s("setTranslate",(()=>{e.params.virtual.enabled&&(e.params.cssMode&&!e._immediateVirtual?(clearTimeout(r),r=setTimeout((()=>{o()}),100)):o())})),s("init update resize",(()=>{e.params.virtual.enabled&&e.params.cssMode&&W(e.wrapperEl,"--swiper-virtual-size",`${e.virtualSize}px`)})),Object.assign(e.virtual,{appendSlide:function(t){if("object"==typeof t&&"length"in t)for(let s=0;s<t.length;s+=1)t[s]&&e.virtual.slides.push(t[s]);else e.virtual.slides.push(t);o(!0)},prependSlide:function(t){const s=e.activeIndex;let a=s+1,r=1;if(Array.isArray(t)){for(let s=0;s<t.length;s+=1)t[s]&&e.virtual.slides.unshift(t[s]);a=s+t.length,r=t.length}else e.virtual.slides.unshift(t);if(e.params.virtual.cache){const t=e.virtual.cache,s={};Object.keys(t).forEach((e=>{const a=t[e],i=a.getAttribute("data-swiper-slide-index");i&&a.setAttribute("data-swiper-slide-index",parseInt(i,10)+r),s[parseInt(e,10)+r]=a})),e.virtual.cache=s}o(!0),e.slideTo(a,0)},removeSlide:function(t){if(null==t)return;let s=e.activeIndex;if(Array.isArray(t))for(let a=t.length-1;a>=0;a-=1)e.virtual.slides.splice(t[a],1),e.params.virtual.cache&&delete e.virtual.cache[t[a]],t[a]<s&&(s-=1),s=Math.max(s,0);else e.virtual.slides.splice(t,1),e.params.virtual.cache&&delete e.virtual.cache[t],t<s&&(s-=1),s=Math.max(s,0);o(!0),e.slideTo(s,0)},removeAllSlides:function(){e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),o(!0),e.slideTo(0,0)},update:o})},function({swiper:e,extendParams:t,on:s,emit:a}){const r=X(),i=N();function n(t){if(!e.enabled)return;const{rtlTranslate:s}=e;let n=t;n.originalEvent&&(n=n.originalEvent);const l=n.keyCode||n.charCode,o=e.params.keyboard.pageUpDown,d=o&&33===l,c=o&&34===l,p=37===l,u=39===l,m=38===l,h=40===l;if(!e.allowSlideNext&&(e.isHorizontal()&&u||e.isVertical()&&h||c))return!1;if(!e.allowSlidePrev&&(e.isHorizontal()&&p||e.isVertical()&&m||d))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||r.activeElement&&r.activeElement.nodeName&&("input"===r.activeElement.nodeName.toLowerCase()||"textarea"===r.activeElement.nodeName.toLowerCase()))){if(e.params.keyboard.onlyInViewport&&(d||c||p||u||m||h)){let t=!1;if(se(e.el,`.${e.params.slideClass}, swiper-slide`).length>0&&0===se(e.el,`.${e.params.slideActiveClass}`).length)return;const a=e.el,r=a.clientWidth,n=a.clientHeight,l=i.innerWidth,o=i.innerHeight,d=J(a);s&&(d.left-=a.scrollLeft);const c=[[d.left,d.top],[d.left+r,d.top],[d.left,d.top+n],[d.left+r,d.top+n]];for(let e=0;e<c.length;e+=1){const s=c[e];if(s[0]>=0&&s[0]<=l&&s[1]>=0&&s[1]<=o){if(0===s[0]&&0===s[1])continue;t=!0}}if(!t)return}e.isHorizontal()?((d||c||p||u)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),((c||u)&&!s||(d||p)&&s)&&e.slideNext(),((d||p)&&!s||(c||u)&&s)&&e.slidePrev()):((d||c||m||h)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),(c||h)&&e.slideNext(),(d||m)&&e.slidePrev()),a("keyPress",l)}}function l(){e.keyboard.enabled||(r.addEventListener("keydown",n),e.keyboard.enabled=!0)}function o(){e.keyboard.enabled&&(r.removeEventListener("keydown",n),e.keyboard.enabled=!1)}e.keyboard={enabled:!1},t({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),s("init",(()=>{e.params.keyboard.enabled&&l()})),s("destroy",(()=>{e.keyboard.enabled&&o()})),Object.assign(e.keyboard,{enable:l,disable:o})},function({swiper:e,extendParams:t,on:s,emit:a}){const r=N();let i;t({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}}),e.mousewheel={enabled:!1};let n,l=j();const o=[];function d(){e.enabled&&(e.mouseEntered=!0)}function c(){e.enabled&&(e.mouseEntered=!1)}function p(t){return!(e.params.mousewheel.thresholdDelta&&t.delta<e.params.mousewheel.thresholdDelta||e.params.mousewheel.thresholdTime&&j()-l<e.params.mousewheel.thresholdTime||!(t.delta>=6&&j()-l<60)&&(t.direction<0?e.isEnd&&!e.params.loop||e.animating||(e.slideNext(),a("scroll",t.raw)):e.isBeginning&&!e.params.loop||e.animating||(e.slidePrev(),a("scroll",t.raw)),l=(new r.Date).getTime(),1))}function u(t){let s=t,r=!0;if(!e.enabled)return;const l=e.params.mousewheel;e.params.cssMode&&s.preventDefault();let d=e.el;"container"!==e.params.mousewheel.eventsTarget&&(d=document.querySelector(e.params.mousewheel.eventsTarget));const c=d&&d.contains(s.target);if(!e.mouseEntered&&!c&&!l.releaseOnEdges)return!0;s.originalEvent&&(s=s.originalEvent);let u=0;const m=e.rtlTranslate?-1:1,h=function(e){let t=0,s=0,a=0,r=0;return"detail"in e&&(s=e.detail),"wheelDelta"in e&&(s=-e.wheelDelta/120),"wheelDeltaY"in e&&(s=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=s,s=0),a=10*t,r=10*s,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(a=e.deltaX),e.shiftKey&&!a&&(a=r,r=0),(a||r)&&e.deltaMode&&(1===e.deltaMode?(a*=40,r*=40):(a*=800,r*=800)),a&&!t&&(t=a<1?-1:1),r&&!s&&(s=r<1?-1:1),{spinX:t,spinY:s,pixelX:a,pixelY:r}}(s);if(l.forceToAxis)if(e.isHorizontal()){if(!(Math.abs(h.pixelX)>Math.abs(h.pixelY)))return!0;u=-h.pixelX*m}else{if(!(Math.abs(h.pixelY)>Math.abs(h.pixelX)))return!0;u=-h.pixelY}else u=Math.abs(h.pixelX)>Math.abs(h.pixelY)?-h.pixelX*m:-h.pixelY;if(0===u)return!0;l.invert&&(u=-u);let f=e.getTranslate()+u*l.sensitivity;if(f>=e.minTranslate()&&(f=e.minTranslate()),f<=e.maxTranslate()&&(f=e.maxTranslate()),r=!!e.params.loop||!(f===e.minTranslate()||f===e.maxTranslate()),r&&e.params.nested&&s.stopPropagation(),e.params.freeMode&&e.params.freeMode.enabled){const t={time:j(),delta:Math.abs(u),direction:Math.sign(u)},r=n&&t.time<n.time+500&&t.delta<=n.delta&&t.direction===n.direction;if(!r){n=void 0;let d=e.getTranslate()+u*l.sensitivity;const c=e.isBeginning,p=e.isEnd;if(d>=e.minTranslate()&&(d=e.minTranslate()),d<=e.maxTranslate()&&(d=e.maxTranslate()),e.setTransition(0),e.setTranslate(d),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses(),(!c&&e.isBeginning||!p&&e.isEnd)&&e.updateSlidesClasses(),e.params.loop&&e.loopFix({direction:t.direction<0?"next":"prev",byMousewheel:!0}),e.params.freeMode.sticky){clearTimeout(i),i=void 0,o.length>=15&&o.shift();const s=o.length?o[o.length-1]:void 0,a=o[0];if(o.push(t),s&&(t.delta>s.delta||t.direction!==s.direction))o.splice(0);else if(o.length>=15&&t.time-a.time<500&&a.delta-t.delta>=1&&t.delta<=6){const s=u>0?.8:.2;n=t,o.splice(0),i=q((()=>{e.slideToClosest(e.params.speed,!0,void 0,s)}),0)}i||(i=q((()=>{n=t,o.splice(0),e.slideToClosest(e.params.speed,!0,void 0,.5)}),500))}if(r||a("scroll",s),e.params.autoplay&&e.params.autoplayDisableOnInteraction&&e.autoplay.stop(),d===e.minTranslate()||d===e.maxTranslate())return!0}}else{const s={time:j(),delta:Math.abs(u),direction:Math.sign(u),raw:t};o.length>=2&&o.shift();const a=o.length?o[o.length-1]:void 0;if(o.push(s),a?(s.direction!==a.direction||s.delta>a.delta||s.time>a.time+150)&&p(s):p(s),function(t){const s=e.params.mousewheel;if(t.direction<0){if(e.isEnd&&!e.params.loop&&s.releaseOnEdges)return!0}else if(e.isBeginning&&!e.params.loop&&s.releaseOnEdges)return!0;return!1}(s))return!0}return s.preventDefault?s.preventDefault():s.returnValue=!1,!1}function m(t){let s=e.el;"container"!==e.params.mousewheel.eventsTarget&&(s=document.querySelector(e.params.mousewheel.eventsTarget)),s[t]("mouseenter",d),s[t]("mouseleave",c),s[t]("wheel",u)}function h(){return e.params.cssMode?(e.wrapperEl.removeEventListener("wheel",u),!0):!e.mousewheel.enabled&&(m("addEventListener"),e.mousewheel.enabled=!0,!0)}function f(){return e.params.cssMode?(e.wrapperEl.addEventListener(event,u),!0):!!e.mousewheel.enabled&&(m("removeEventListener"),e.mousewheel.enabled=!1,!0)}s("init",(()=>{!e.params.mousewheel.enabled&&e.params.cssMode&&f(),e.params.mousewheel.enabled&&h()})),s("destroy",(()=>{e.params.cssMode&&h(),e.mousewheel.enabled&&f()})),Object.assign(e.mousewheel,{enable:h,disable:f})},function({swiper:e,extendParams:t,on:s,emit:a}){t({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};const r=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function i(t){let s;return t&&"string"==typeof t&&e.isElement&&(s=e.el.shadowRoot.querySelector(t),s)?s:(t&&("string"==typeof t&&(s=[...document.querySelectorAll(t)]),e.params.uniqueNavElements&&"string"==typeof t&&s.length>1&&1===e.el.querySelectorAll(t).length&&(s=e.el.querySelector(t))),t&&!s?t:s)}function n(t,s){const a=e.params.navigation;(t=r(t)).forEach((t=>{t&&(t.classList[s?"add":"remove"](...a.disabledClass.split(" ")),"BUTTON"===t.tagName&&(t.disabled=s),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](a.lockClass))}))}function l(){const{nextEl:t,prevEl:s}=e.navigation;if(e.params.loop)return n(s,!1),void n(t,!1);n(s,e.isBeginning&&!e.params.rewind),n(t,e.isEnd&&!e.params.rewind)}function o(t){t.preventDefault(),(!e.isBeginning||e.params.loop||e.params.rewind)&&(e.slidePrev(),a("navigationPrev"))}function d(t){t.preventDefault(),(!e.isEnd||e.params.loop||e.params.rewind)&&(e.slideNext(),a("navigationNext"))}function c(){const t=e.params.navigation;if(e.params.navigation=$e(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!t.nextEl&&!t.prevEl)return;let s=i(t.nextEl),a=i(t.prevEl);Object.assign(e.navigation,{nextEl:s,prevEl:a}),s=r(s),a=r(a);const n=(s,a)=>{s&&s.addEventListener("click","next"===a?d:o),!e.enabled&&s&&s.classList.add(...t.lockClass.split(" "))};s.forEach((e=>n(e,"next"))),a.forEach((e=>n(e,"prev")))}function p(){let{nextEl:t,prevEl:s}=e.navigation;t=r(t),s=r(s);const a=(t,s)=>{t.removeEventListener("click","next"===s?d:o),t.classList.remove(...e.params.navigation.disabledClass.split(" "))};t.forEach((e=>a(e,"next"))),s.forEach((e=>a(e,"prev")))}s("init",(()=>{!1===e.params.navigation.enabled?u():(c(),l())})),s("toEdge fromEdge lock unlock",(()=>{l()})),s("destroy",(()=>{p()})),s("enable disable",(()=>{let{nextEl:t,prevEl:s}=e.navigation;t=r(t),s=r(s),[...t,...s].filter((e=>!!e)).forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.navigation.lockClass)))})),s("click",((t,s)=>{let{nextEl:i,prevEl:n}=e.navigation;i=r(i),n=r(n);const l=s.target;if(e.params.navigation.hideOnClick&&!n.includes(l)&&!i.includes(l)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===l||e.pagination.el.contains(l)))return;let t;i.length?t=i[0].classList.contains(e.params.navigation.hiddenClass):n.length&&(t=n[0].classList.contains(e.params.navigation.hiddenClass)),a(!0===t?"navigationShow":"navigationHide"),[...i,...n].filter((e=>!!e)).forEach((t=>t.classList.toggle(e.params.navigation.hiddenClass)))}}));const u=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(e.navigation,{enable:()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),c(),l()},disable:u,update:l,init:c,destroy:p})},function({swiper:e,extendParams:t,on:s,emit:a}){const r="swiper-pagination";let i;t({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),e.pagination={el:null,bullets:[]};let n=0;const l=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function o(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&0===e.pagination.el.length}function d(t,s){const{bulletActiveClass:a}=e.params.pagination;t&&(t=t[("prev"===s?"previous":"next")+"ElementSibling"])&&(t.classList.add(`${a}-${s}`),(t=t[("prev"===s?"previous":"next")+"ElementSibling"])&&t.classList.add(`${a}-${s}-${s}`))}function c(t){const s=t.target.closest(Oe(e.params.pagination.bulletClass));if(!s)return;t.preventDefault();const a=te(s)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===a)return;const t=e.getSlideIndexByData(a),s=e.getSlideIndexByData(e.realIndex);t>e.slides.length-e.loopedSlides&&e.loopFix({direction:t>s?"next":"prev",activeSlideIndex:t,slideTo:!1}),e.slideToLoop(a)}else e.slideTo(a)}function p(){const t=e.rtl,s=e.params.pagination;if(o())return;let r,c,p=e.pagination.el;p=l(p);const u=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,m=e.params.loop?Math.ceil(u/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(c=e.previousRealIndex||0,r=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):void 0!==e.snapIndex?(r=e.snapIndex,c=e.previousSnapIndex):(c=e.previousIndex||0,r=e.activeIndex||0),"bullets"===s.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const a=e.pagination.bullets;let l,o,u;if(s.dynamicBullets&&(i=re(a[0],e.isHorizontal()?"width":"height",!0),p.forEach((t=>{t.style[e.isHorizontal()?"width":"height"]=i*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==c&&(n+=r-(c||0),n>s.dynamicMainBullets-1?n=s.dynamicMainBullets-1:n<0&&(n=0)),l=Math.max(r-n,0),o=l+(Math.min(a.length,s.dynamicMainBullets)-1),u=(o+l)/2),a.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),p.length>1)a.forEach((e=>{const t=te(e);t===r&&e.classList.add(...s.bulletActiveClass.split(" ")),s.dynamicBullets&&(t>=l&&t<=o&&e.classList.add(...`${s.bulletActiveClass}-main`.split(" ")),t===l&&d(e,"prev"),t===o&&d(e,"next"))}));else{const e=a[r];if(e&&e.classList.add(...s.bulletActiveClass.split(" ")),s.dynamicBullets){const e=a[l],t=a[o];for(let e=l;e<=o;e+=1)a[e]&&a[e].classList.add(...`${s.bulletActiveClass}-main`.split(" "));d(e,"prev"),d(t,"next")}}if(s.dynamicBullets){const r=Math.min(a.length,s.dynamicMainBullets+4),n=(i*r-i)/2-u*i,l=t?"right":"left";a.forEach((t=>{t.style[e.isHorizontal()?l:"top"]=`${n}px`}))}}p.forEach(((t,i)=>{if("fraction"===s.type&&(t.querySelectorAll(Oe(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(r+1)})),t.querySelectorAll(Oe(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(m)}))),"progressbar"===s.type){let a;a=s.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const i=(r+1)/m;let n=1,l=1;"horizontal"===a?n=i:l=i,t.querySelectorAll(Oe(s.progressbarFillClass)).forEach((t=>{t.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${l})`,t.style.transitionDuration=`${e.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(t.innerHTML=s.renderCustom(e,r+1,m),0===i&&a("paginationRender",t)):(0===i&&a("paginationRender",t),a("paginationUpdate",t)),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](s.lockClass)}))}function u(){const t=e.params.pagination;if(o())return;const s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length;let r=e.pagination.el;r=l(r);let i="";if("bullets"===t.type){let a=e.params.loop?Math.ceil(s/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&a>s&&(a=s);for(let s=0;s<a;s+=1)t.renderBullet?i+=t.renderBullet.call(e,s,t.bulletClass):i+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`}"fraction"===t.type&&(i=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`),"progressbar"===t.type&&(i=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`),e.pagination.bullets=[],r.forEach((s=>{"custom"!==t.type&&(s.innerHTML=i||""),"bullets"===t.type&&e.pagination.bullets.push(...s.querySelectorAll(Oe(t.bulletClass)))})),"custom"!==t.type&&a("paginationRender",r[0])}function m(){e.params.pagination=$e(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const t=e.params.pagination;if(!t.el)return;let s;"string"==typeof t.el&&e.isElement&&(s=e.el.shadowRoot.querySelector(t.el)),s||"string"!=typeof t.el||(s=[...document.querySelectorAll(t.el)]),s||(s=t.el),s&&0!==s.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&Array.isArray(s)&&s.length>1&&(s=[...e.el.querySelectorAll(t.el)],s.length>1&&(s=s.filter((t=>se(t,".swiper")[0]===e.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(e.pagination,{el:s}),s=l(s),s.forEach((s=>{"bullets"===t.type&&t.clickable&&s.classList.add(t.clickableClass),s.classList.add(t.modifierClass+t.type),s.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(s.classList.add(`${t.modifierClass}${t.type}-dynamic`),n=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&s.classList.add(t.progressbarOppositeClass),t.clickable&&s.addEventListener("click",c),e.enabled||s.classList.add(t.lockClass)})))}function h(){const t=e.params.pagination;if(o())return;let s=e.pagination.el;s&&(s=l(s),s.forEach((s=>{s.classList.remove(t.hiddenClass),s.classList.remove(t.modifierClass+t.type),s.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),t.clickable&&s.removeEventListener("click",c)}))),e.pagination.bullets&&e.pagination.bullets.forEach((e=>e.classList.remove(...t.bulletActiveClass.split(" "))))}s("changeDirection",(()=>{if(!e.pagination||!e.pagination.el)return;const t=e.params.pagination;let{el:s}=e.pagination;s=l(s),s.forEach((s=>{s.classList.remove(t.horizontalClass,t.verticalClass),s.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass)}))})),s("init",(()=>{!1===e.params.pagination.enabled?f():(m(),u(),p())})),s("activeIndexChange",(()=>{void 0===e.snapIndex&&p()})),s("snapIndexChange",(()=>{p()})),s("snapGridLengthChange",(()=>{u(),p()})),s("destroy",(()=>{h()})),s("enable disable",(()=>{let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass))))})),s("lock unlock",(()=>{p()})),s("click",((t,s)=>{const r=s.target;let{el:i}=e.pagination;if(Array.isArray(i)||(i=[i].filter((e=>!!e))),e.params.pagination.el&&e.params.pagination.hideOnClick&&i&&i.length>0&&!r.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&r===e.navigation.nextEl||e.navigation.prevEl&&r===e.navigation.prevEl))return;const t=i[0].classList.contains(e.params.pagination.hiddenClass);a(!0===t?"paginationShow":"paginationHide"),i.forEach((t=>t.classList.toggle(e.params.pagination.hiddenClass)))}}));const f=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList.add(e.params.pagination.paginationDisabledClass)))),h()};Object.assign(e.pagination,{enable:()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList.remove(e.params.pagination.paginationDisabledClass)))),m(),u(),p()},disable:f,render:u,update:p,init:m,destroy:h})},function({swiper:e,extendParams:t,on:s,emit:a}){const r=X();let i,n,l,o,d=!1,c=null,p=null;function u(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:s}=e,{dragEl:a,el:r}=t,i=e.params.scrollbar,o=e.params.loop?e.progressLoop:e.progress;let d=n,p=(l-n)*o;s?(p=-p,p>0?(d=n-p,p=0):-p+n>l&&(d=l+p)):p<0?(d=n+p,p=0):p+n>l&&(d=l-p),e.isHorizontal()?(a.style.transform=`translate3d(${p}px, 0, 0)`,a.style.width=`${d}px`):(a.style.transform=`translate3d(0px, ${p}px, 0)`,a.style.height=`${d}px`),i.hide&&(clearTimeout(c),r.style.opacity=1,c=setTimeout((()=>{r.style.opacity=0,r.style.transitionDuration="400ms"}),1e3))}function m(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{dragEl:s,el:a}=t;s.style.width="",s.style.height="",l=e.isHorizontal()?a.offsetWidth:a.offsetHeight,o=e.size/(e.virtualSize+e.params.slidesOffsetBefore-(e.params.centeredSlides?e.snapGrid[0]:0)),n="auto"===e.params.scrollbar.dragSize?l*o:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?s.style.width=`${n}px`:s.style.height=`${n}px`,a.style.display=o>=1?"none":"",e.params.scrollbar.hide&&(a.style.opacity=0),e.params.watchOverflow&&e.enabled&&t.el.classList[e.isLocked?"add":"remove"](e.params.scrollbar.lockClass)}function h(t){return e.isHorizontal()?t.clientX:t.clientY}function f(t){const{scrollbar:s,rtlTranslate:a}=e,{el:r}=s;let o;o=(h(t)-J(r)[e.isHorizontal()?"left":"top"]-(null!==i?i:n/2))/(l-n),o=Math.max(Math.min(o,1),0),a&&(o=1-o);const d=e.minTranslate()+(e.maxTranslate()-e.minTranslate())*o;e.updateProgress(d),e.setTranslate(d),e.updateActiveIndex(),e.updateSlidesClasses()}function g(t){const s=e.params.scrollbar,{scrollbar:r,wrapperEl:n}=e,{el:l,dragEl:o}=r;d=!0,i=t.target===o?h(t)-t.target.getBoundingClientRect()[e.isHorizontal()?"left":"top"]:null,t.preventDefault(),t.stopPropagation(),n.style.transitionDuration="100ms",o.style.transitionDuration="100ms",f(t),clearTimeout(p),l.style.transitionDuration="0ms",s.hide&&(l.style.opacity=1),e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="none"),a("scrollbarDragStart",t)}function v(t){const{scrollbar:s,wrapperEl:r}=e,{el:i,dragEl:n}=s;d&&(t.preventDefault?t.preventDefault():t.returnValue=!1,f(t),r.style.transitionDuration="0ms",i.style.transitionDuration="0ms",n.style.transitionDuration="0ms",a("scrollbarDragMove",t))}function w(t){const s=e.params.scrollbar,{scrollbar:r,wrapperEl:i}=e,{el:n}=r;d&&(d=!1,e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="",i.style.transitionDuration=""),s.hide&&(clearTimeout(p),p=q((()=>{n.style.opacity=0,n.style.transitionDuration="400ms"}),1e3)),a("scrollbarDragEnd",t),s.snapOnRelease&&e.slideToClosest())}function y(t){const{scrollbar:s,params:a}=e,i=s.el;if(!i)return;const n=i,l=!!a.passiveListeners&&{passive:!1,capture:!1},o=!!a.passiveListeners&&{passive:!0,capture:!1};if(!n)return;const d="on"===t?"addEventListener":"removeEventListener";n[d]("pointerdown",g,l),r[d]("pointermove",v,l),r[d]("pointerup",w,o)}function b(){const{scrollbar:t,el:s}=e;e.params.scrollbar=$e(e,e.originalParams.scrollbar,e.params.scrollbar,{el:"swiper-scrollbar"});const a=e.params.scrollbar;if(!a.el)return;let i,n;"string"==typeof a.el&&e.isElement&&(i=e.el.shadowRoot.querySelector(a.el)),i||"string"!=typeof a.el?i||(i=a.el):i=r.querySelectorAll(a.el),e.params.uniqueNavElements&&"string"==typeof a.el&&i.length>1&&1===s.querySelectorAll(a.el).length&&(i=s.querySelector(a.el)),i.length>0&&(i=i[0]),i.classList.add(e.isHorizontal()?a.horizontalClass:a.verticalClass),i&&(n=i.querySelector(`.${e.params.scrollbar.dragClass}`),n||(n=Q("div",e.params.scrollbar.dragClass),i.append(n))),Object.assign(t,{el:i,dragEl:n}),a.draggable&&e.params.scrollbar.el&&e.scrollbar.el&&y("on"),i&&i.classList[e.enabled?"remove":"add"](e.params.scrollbar.lockClass)}function E(){const t=e.params.scrollbar,s=e.scrollbar.el;s&&s.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),e.params.scrollbar.el&&e.scrollbar.el&&y("off")}t({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),e.scrollbar={el:null,dragEl:null},s("init",(()=>{!1===e.params.scrollbar.enabled?x():(b(),m(),u())})),s("update resize observerUpdate lock unlock",(()=>{m()})),s("setTranslate",(()=>{u()})),s("setTransition",((t,s)=>{!function(t){e.params.scrollbar.el&&e.scrollbar.el&&(e.scrollbar.dragEl.style.transitionDuration=`${t}ms`)}(s)})),s("enable disable",(()=>{const{el:t}=e.scrollbar;t&&t.classList[e.enabled?"remove":"add"](e.params.scrollbar.lockClass)})),s("destroy",(()=>{E()}));const x=()=>{e.el.classList.add(e.params.scrollbar.scrollbarDisabledClass),e.scrollbar.el&&e.scrollbar.el.classList.add(e.params.scrollbar.scrollbarDisabledClass),E()};Object.assign(e.scrollbar,{enable:()=>{e.el.classList.remove(e.params.scrollbar.scrollbarDisabledClass),e.scrollbar.el&&e.scrollbar.el.classList.remove(e.params.scrollbar.scrollbarDisabledClass),b(),m(),u()},disable:x,updateSize:m,setTranslate:u,init:b,destroy:E})},function({swiper:e,extendParams:t,on:s}){t({parallax:{enabled:!1}});const a=(t,s)=>{const{rtl:a}=e,r=a?-1:1,i=t.getAttribute("data-swiper-parallax")||"0";let n=t.getAttribute("data-swiper-parallax-x"),l=t.getAttribute("data-swiper-parallax-y");const o=t.getAttribute("data-swiper-parallax-scale"),d=t.getAttribute("data-swiper-parallax-opacity"),c=t.getAttribute("data-swiper-parallax-rotate");if(n||l?(n=n||"0",l=l||"0"):e.isHorizontal()?(n=i,l="0"):(l=i,n="0"),n=n.indexOf("%")>=0?parseInt(n,10)*s*r+"%":n*s*r+"px",l=l.indexOf("%")>=0?parseInt(l,10)*s+"%":l*s+"px",null!=d){const e=d-(d-1)*(1-Math.abs(s));t.style.opacity=e}let p=`translate3d(${n}, ${l}, 0px)`;null!=o&&(p+=` scale(${o-(o-1)*(1-Math.abs(s))})`),c&&null!=c&&(p+=` rotate(${c*s*-1}deg)`),t.style.transform=p},r=()=>{const{el:t,slides:s,progress:r,snapGrid:i}=e;Z(t,"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").forEach((e=>{a(e,r)})),s.forEach(((t,s)=>{let n=t.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(n+=Math.ceil(s/2)-r*(i.length-1)),n=Math.min(Math.max(n,-1),1),t.querySelectorAll("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale], [data-swiper-parallax-rotate]").forEach((e=>{a(e,n)}))}))};s("beforeInit",(()=>{e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)})),s("init",(()=>{e.params.parallax.enabled&&r()})),s("setTranslate",(()=>{e.params.parallax.enabled&&r()})),s("setTransition",((t,s)=>{e.params.parallax.enabled&&((t=e.params.speed)=>{const{el:s}=e;s.querySelectorAll("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").forEach((e=>{let s=parseInt(e.getAttribute("data-swiper-parallax-duration"),10)||t;0===t&&(s=0),e.style.transitionDuration=`${s}ms`}))})(s)}))},function({swiper:e,extendParams:t,on:s,emit:a}){const r=N();t({zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),e.zoom={enabled:!1};let i,n,l=1,o=!1;const d=[],c={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},p={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},u={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let m=1;function h(){if(d.length<2)return 1;const e=d[0].pageX,t=d[0].pageY,s=d[1].pageX,a=d[1].pageY;return Math.sqrt((s-e)**2+(a-t)**2)}function f(t){const s=e.isElement?"swiper-slide":`.${e.params.slideClass}`;return!!t.target.matches(s)||e.slides.filter((e=>e.contains(t.target))).length>0}function g(t){if("mouse"===t.pointerType&&d.splice(0,d.length),!f(t))return;const s=e.params.zoom;if(i=!1,n=!1,d.push(t),!(d.length<2)){if(i=!0,c.scaleStart=h(),!c.slideEl){c.slideEl=t.target.closest(`.${e.params.slideClass}, swiper-slide`),c.slideEl||(c.slideEl=e.slides[e.activeIndex]);let a=c.slideEl.querySelector(`.${s.containerClass}`);if(a&&(a=a.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=a,c.imageWrapEl=a?se(c.imageEl,`.${s.containerClass}`)[0]:void 0,!c.imageWrapEl)return void(c.imageEl=void 0);c.maxRatio=c.imageWrapEl.getAttribute("data-swiper-zoom")||s.maxRatio}if(c.imageEl){const[e,t]=function(){if(d.length<2)return{x:null,y:null};const e=c.imageEl.getBoundingClientRect();return[(d[0].pageX+(d[1].pageX-d[0].pageX)/2-e.x)/l,(d[0].pageY+(d[1].pageY-d[0].pageY)/2-e.y)/l]}();c.originX=e,c.originY=t,c.imageEl.style.transitionDuration="0ms"}o=!0}}function v(t){if(!f(t))return;const s=e.params.zoom,a=e.zoom,r=d.findIndex((e=>e.pointerId===t.pointerId));r>=0&&(d[r]=t),d.length<2||(n=!0,c.scaleMove=h(),c.imageEl&&(a.scale=c.scaleMove/c.scaleStart*l,a.scale>c.maxRatio&&(a.scale=c.maxRatio-1+(a.scale-c.maxRatio+1)**.5),a.scale<s.minRatio&&(a.scale=s.minRatio+1-(s.minRatio-a.scale+1)**.5),c.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`))}function w(t){if(!f(t))return;if("mouse"===t.pointerType&&"pointerout"===t.type)return;const s=e.params.zoom,a=e.zoom,r=d.findIndex((e=>e.pointerId===t.pointerId));r>=0&&d.splice(r,1),i&&n&&(i=!1,n=!1,c.imageEl&&(a.scale=Math.max(Math.min(a.scale,c.maxRatio),s.minRatio),c.imageEl.style.transitionDuration=`${e.params.speed}ms`,c.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`,l=a.scale,o=!1,a.scale>1&&c.slideEl?c.slideEl.classList.add(`${s.zoomedSlideClass}`):a.scale<=1&&c.slideEl&&c.slideEl.classList.remove(`${s.zoomedSlideClass}`),1===a.scale&&(c.originX=0,c.originY=0,c.slideEl=void 0)))}function y(t){if(!f(t)||!function(t){const s=`.${e.params.zoom.containerClass}`;return!!t.target.matches(s)||[...e.el.querySelectorAll(s)].filter((e=>e.contains(t.target))).length>0}(t))return;const s=e.zoom;if(!c.imageEl)return;if(!p.isTouched||!c.slideEl)return;p.isMoved||(p.width=c.imageEl.offsetWidth,p.height=c.imageEl.offsetHeight,p.startX=R(c.imageWrapEl,"x")||0,p.startY=R(c.imageWrapEl,"y")||0,c.slideWidth=c.slideEl.offsetWidth,c.slideHeight=c.slideEl.offsetHeight,c.imageWrapEl.style.transitionDuration="0ms");const a=p.width*s.scale,r=p.height*s.scale;if(a<c.slideWidth&&r<c.slideHeight)return;if(p.minX=Math.min(c.slideWidth/2-a/2,0),p.maxX=-p.minX,p.minY=Math.min(c.slideHeight/2-r/2,0),p.maxY=-p.minY,p.touchesCurrent.x=d.length>0?d[0].pageX:t.pageX,p.touchesCurrent.y=d.length>0?d[0].pageY:t.pageY,Math.max(Math.abs(p.touchesCurrent.x-p.touchesStart.x),Math.abs(p.touchesCurrent.y-p.touchesStart.y))>5&&(e.allowClick=!1),!p.isMoved&&!o){if(e.isHorizontal()&&(Math.floor(p.minX)===Math.floor(p.startX)&&p.touchesCurrent.x<p.touchesStart.x||Math.floor(p.maxX)===Math.floor(p.startX)&&p.touchesCurrent.x>p.touchesStart.x))return void(p.isTouched=!1);if(!e.isHorizontal()&&(Math.floor(p.minY)===Math.floor(p.startY)&&p.touchesCurrent.y<p.touchesStart.y||Math.floor(p.maxY)===Math.floor(p.startY)&&p.touchesCurrent.y>p.touchesStart.y))return void(p.isTouched=!1)}t.cancelable&&t.preventDefault(),t.stopPropagation(),p.isMoved=!0;const i=(s.scale-l)/(c.maxRatio-e.params.zoom.minRatio),{originX:n,originY:m}=c;p.currentX=p.touchesCurrent.x-p.touchesStart.x+p.startX+i*(p.width-2*n),p.currentY=p.touchesCurrent.y-p.touchesStart.y+p.startY+i*(p.height-2*m),p.currentX<p.minX&&(p.currentX=p.minX+1-(p.minX-p.currentX+1)**.8),p.currentX>p.maxX&&(p.currentX=p.maxX-1+(p.currentX-p.maxX+1)**.8),p.currentY<p.minY&&(p.currentY=p.minY+1-(p.minY-p.currentY+1)**.8),p.currentY>p.maxY&&(p.currentY=p.maxY-1+(p.currentY-p.maxY+1)**.8),u.prevPositionX||(u.prevPositionX=p.touchesCurrent.x),u.prevPositionY||(u.prevPositionY=p.touchesCurrent.y),u.prevTime||(u.prevTime=Date.now()),u.x=(p.touchesCurrent.x-u.prevPositionX)/(Date.now()-u.prevTime)/2,u.y=(p.touchesCurrent.y-u.prevPositionY)/(Date.now()-u.prevTime)/2,Math.abs(p.touchesCurrent.x-u.prevPositionX)<2&&(u.x=0),Math.abs(p.touchesCurrent.y-u.prevPositionY)<2&&(u.y=0),u.prevPositionX=p.touchesCurrent.x,u.prevPositionY=p.touchesCurrent.y,u.prevTime=Date.now(),c.imageWrapEl.style.transform=`translate3d(${p.currentX}px, ${p.currentY}px,0)`}function b(){const t=e.zoom;c.slideEl&&e.activeIndex!==e.slides.indexOf(c.slideEl)&&(c.imageEl&&(c.imageEl.style.transform="translate3d(0,0,0) scale(1)"),c.imageWrapEl&&(c.imageWrapEl.style.transform="translate3d(0,0,0)"),c.slideEl.classList.remove(`${e.params.zoom.zoomedSlideClass}`),t.scale=1,l=1,c.slideEl=void 0,c.imageEl=void 0,c.imageWrapEl=void 0,c.originX=0,c.originY=0)}function E(t){const s=e.zoom,a=e.params.zoom;if(!c.slideEl){t&&t.target&&(c.slideEl=t.target.closest(`.${e.params.slideClass}, swiper-slide`)),c.slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?c.slideEl=Z(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:c.slideEl=e.slides[e.activeIndex]);let s=c.slideEl.querySelector(`.${a.containerClass}`);s&&(s=s.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=s,c.imageWrapEl=s?se(c.imageEl,`.${a.containerClass}`)[0]:void 0}if(!c.imageEl||!c.imageWrapEl)return;let i,n,o,d,u,m,h,f,g,v,w,y,b,E,x,S,T,M;e.params.cssMode&&(e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.touchAction="none"),c.slideEl.classList.add(`${a.zoomedSlideClass}`),void 0===p.touchesStart.x&&t?(i=t.pageX,n=t.pageY):(i=p.touchesStart.x,n=p.touchesStart.y);const C="number"==typeof t?t:null;1===l&&C&&(i=void 0,n=void 0),s.scale=C||c.imageWrapEl.getAttribute("data-swiper-zoom")||a.maxRatio,l=C||c.imageWrapEl.getAttribute("data-swiper-zoom")||a.maxRatio,!t||1===l&&C?(h=0,f=0):(T=c.slideEl.offsetWidth,M=c.slideEl.offsetHeight,o=J(c.slideEl).left+r.scrollX,d=J(c.slideEl).top+r.scrollY,u=o+T/2-i,m=d+M/2-n,g=c.imageEl.offsetWidth,v=c.imageEl.offsetHeight,w=g*s.scale,y=v*s.scale,b=Math.min(T/2-w/2,0),E=Math.min(M/2-y/2,0),x=-b,S=-E,h=u*s.scale,f=m*s.scale,h<b&&(h=b),h>x&&(h=x),f<E&&(f=E),f>S&&(f=S)),C&&1===s.scale&&(c.originX=0,c.originY=0),c.imageWrapEl.style.transitionDuration="300ms",c.imageWrapEl.style.transform=`translate3d(${h}px, ${f}px,0)`,c.imageEl.style.transitionDuration="300ms",c.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`}function x(){const t=e.zoom,s=e.params.zoom;if(!c.slideEl){e.params.virtual&&e.params.virtual.enabled&&e.virtual?c.slideEl=Z(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:c.slideEl=e.slides[e.activeIndex];let t=c.slideEl.querySelector(`.${s.containerClass}`);t&&(t=t.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=t,c.imageWrapEl=t?se(c.imageEl,`.${s.containerClass}`)[0]:void 0}c.imageEl&&c.imageWrapEl&&(e.params.cssMode&&(e.wrapperEl.style.overflow="",e.wrapperEl.style.touchAction=""),t.scale=1,l=1,c.imageWrapEl.style.transitionDuration="300ms",c.imageWrapEl.style.transform="translate3d(0,0,0)",c.imageEl.style.transitionDuration="300ms",c.imageEl.style.transform="translate3d(0,0,0) scale(1)",c.slideEl.classList.remove(`${s.zoomedSlideClass}`),c.slideEl=void 0,c.originX=0,c.originY=0)}function S(t){const s=e.zoom;s.scale&&1!==s.scale?x():E(t)}function T(){return{passiveListener:!!e.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!e.params.passiveListeners||{passive:!1,capture:!0}}}function M(){const t=e.zoom;if(t.enabled)return;t.enabled=!0;const{passiveListener:s,activeListenerWithCapture:a}=T();e.wrapperEl.addEventListener("pointerdown",g,s),e.wrapperEl.addEventListener("pointermove",v,a),["pointerup","pointercancel","pointerout"].forEach((t=>{e.wrapperEl.addEventListener(t,w,s)})),e.wrapperEl.addEventListener("pointermove",y,a)}function C(){const t=e.zoom;if(!t.enabled)return;t.enabled=!1;const{passiveListener:s,activeListenerWithCapture:a}=T();e.wrapperEl.removeEventListener("pointerdown",g,s),e.wrapperEl.removeEventListener("pointermove",v,a),["pointerup","pointercancel","pointerout"].forEach((t=>{e.wrapperEl.removeEventListener(t,w,s)})),e.wrapperEl.removeEventListener("pointermove",y,a)}Object.defineProperty(e.zoom,"scale",{get(){return m},set(e){if(m!==e){const t=c.imageEl,s=c.slideEl;a("zoomChange",e,t,s)}m=e}}),s("init",(()=>{e.params.zoom.enabled&&M()})),s("destroy",(()=>{C()})),s("touchStart",((t,s)=>{e.zoom.enabled&&function(t){const s=e.device;if(!c.imageEl)return;if(p.isTouched)return;s.android&&t.cancelable&&t.preventDefault(),p.isTouched=!0;const a=d.length>0?d[0]:t;p.touchesStart.x=a.pageX,p.touchesStart.y=a.pageY}(s)})),s("touchEnd",((t,s)=>{e.zoom.enabled&&function(){const t=e.zoom;if(!c.imageEl)return;if(!p.isTouched||!p.isMoved)return p.isTouched=!1,void(p.isMoved=!1);p.isTouched=!1,p.isMoved=!1;let s=300,a=300;const r=u.x*s,i=p.currentX+r,n=u.y*a,l=p.currentY+n;0!==u.x&&(s=Math.abs((i-p.currentX)/u.x)),0!==u.y&&(a=Math.abs((l-p.currentY)/u.y));const o=Math.max(s,a);p.currentX=i,p.currentY=l;const d=p.width*t.scale,m=p.height*t.scale;p.minX=Math.min(c.slideWidth/2-d/2,0),p.maxX=-p.minX,p.minY=Math.min(c.slideHeight/2-m/2,0),p.maxY=-p.minY,p.currentX=Math.max(Math.min(p.currentX,p.maxX),p.minX),p.currentY=Math.max(Math.min(p.currentY,p.maxY),p.minY),c.imageWrapEl.style.transitionDuration=`${o}ms`,c.imageWrapEl.style.transform=`translate3d(${p.currentX}px, ${p.currentY}px,0)`}()})),s("doubleTap",((t,s)=>{!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&S(s)})),s("transitionEnd",(()=>{e.zoom.enabled&&e.params.zoom.enabled&&b()})),s("slideChange",(()=>{e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&b()})),Object.assign(e.zoom,{enable:M,disable:C,in:E,out:x,toggle:S})},function({swiper:e,extendParams:t,on:s}){function a(e,t){const s=function(){let e,t,s;return(a,r)=>{for(t=-1,e=a.length;e-t>1;)s=e+t>>1,a[s]<=r?t=s:e=s;return e}}();let a,r;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=s(this.x,e),a=r-1,(e-this.x[a])*(this.y[r]-this.y[a])/(this.x[r]-this.x[a])+this.y[a]):0},this}function r(){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)}t({controller:{control:void 0,inverse:!1,by:"slide"}}),e.controller={control:void 0},s("beforeInit",(()=>{if("undefined"!=typeof window&&("string"==typeof e.params.controller.control||e.params.controller.control instanceof HTMLElement)){const t=document.querySelector(e.params.controller.control);if(t&&t.swiper)e.controller.control=t.swiper;else if(t){const s=a=>{e.controller.control=a.detail[0],e.update(),t.removeEventListener("init",s)};t.addEventListener("init",s)}}else e.controller.control=e.params.controller.control})),s("update",(()=>{r()})),s("resize",(()=>{r()})),s("observerUpdate",(()=>{r()})),s("setTranslate",((t,s,a)=>{e.controller.control&&!e.controller.control.destroyed&&e.controller.setTranslate(s,a)})),s("setTransition",((t,s,a)=>{e.controller.control&&!e.controller.control.destroyed&&e.controller.setTransition(s,a)})),Object.assign(e.controller,{setTranslate:function(t,s){const r=e.controller.control;let i,n;const l=e.constructor;function o(t){if(t.destroyed)return;const s=e.rtlTranslate?-e.translate:e.translate;"slide"===e.params.controller.by&&(function(t){e.controller.spline=e.params.loop?new a(e.slidesGrid,t.slidesGrid):new a(e.snapGrid,t.snapGrid)}(t),n=-e.controller.spline.interpolate(-s)),n&&"container"!==e.params.controller.by||(i=(t.maxTranslate()-t.minTranslate())/(e.maxTranslate()-e.minTranslate()),!Number.isNaN(i)&&Number.isFinite(i)||(i=1),n=(s-e.minTranslate())*i+t.minTranslate()),e.params.controller.inverse&&(n=t.maxTranslate()-n),t.updateProgress(n),t.setTranslate(n,e),t.updateActiveIndex(),t.updateSlidesClasses()}if(Array.isArray(r))for(let e=0;e<r.length;e+=1)r[e]!==s&&r[e]instanceof l&&o(r[e]);else r instanceof l&&s!==r&&o(r)},setTransition:function(t,s){const a=e.constructor,r=e.controller.control;let i;function n(s){s.destroyed||(s.setTransition(t,e),0!==t&&(s.transitionStart(),s.params.autoHeight&&q((()=>{s.updateAutoHeight()})),ae(s.wrapperEl,(()=>{r&&s.transitionEnd()}))))}if(Array.isArray(r))for(i=0;i<r.length;i+=1)r[i]!==s&&r[i]instanceof a&&n(r[i]);else r instanceof a&&s!==r&&n(r)}})},function({swiper:e,extendParams:t,on:s}){t({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let a=null;function r(e){const t=a;0!==t.length&&(t.innerHTML="",t.innerHTML=e)}const i=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function n(e){(e=i(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function l(e){(e=i(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function o(e,t){(e=i(e)).forEach((e=>{e.setAttribute("role",t)}))}function d(e,t){(e=i(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function c(e,t){(e=i(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function p(e){(e=i(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function u(e){(e=i(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function m(t){if(13!==t.keyCode&&32!==t.keyCode)return;const s=e.params.a11y,a=t.target;e.pagination&&e.pagination.el&&(a===e.pagination.el||e.pagination.el.contains(t.target))&&!t.target.matches(Oe(e.params.pagination.bulletClass))||(e.navigation&&e.navigation.nextEl&&a===e.navigation.nextEl&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?r(s.lastSlideMessage):r(s.nextSlideMessage)),e.navigation&&e.navigation.prevEl&&a===e.navigation.prevEl&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?r(s.firstSlideMessage):r(s.prevSlideMessage)),e.pagination&&a.matches(Oe(e.params.pagination.bulletClass))&&a.click())}function h(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function f(){return h()&&e.params.pagination.clickable}const g=(e,t,s)=>{n(e),"BUTTON"!==e.tagName&&(o(e,"button"),e.addEventListener("keydown",m)),c(e,s),function(e,t){(e=i(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},v=()=>{e.a11y.clicked=!0},w=()=>{requestAnimationFrame((()=>{requestAnimationFrame((()=>{e.destroyed||(e.a11y.clicked=!1)}))}))},y=t=>{if(e.a11y.clicked)return;const s=t.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!s||!e.slides.includes(s))return;const a=e.slides.indexOf(s)===e.activeIndex,r=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(s);a||r||t.sourceCapabilities&&t.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,e.slideTo(e.slides.indexOf(s),0))},b=()=>{const t=e.params.a11y;t.itemRoleDescriptionMessage&&d(e.slides,t.itemRoleDescriptionMessage),t.slideRole&&o(e.slides,t.slideRole);const s=e.slides.length;t.slideLabelMessage&&e.slides.forEach(((a,r)=>{const i=e.params.loop?parseInt(a.getAttribute("data-swiper-slide-index"),10):r;c(a,t.slideLabelMessage.replace(/\{\{index\}\}/,i+1).replace(/\{\{slidesLength\}\}/,s))}))};s("beforeInit",(()=>{a=Q("span",e.params.a11y.notificationClass),a.setAttribute("aria-live","assertive"),a.setAttribute("aria-atomic","true"),e.isElement&&a.setAttribute("slot","container-end")})),s("afterInit",(()=>{e.params.a11y.enabled&&(()=>{const t=e.params.a11y;e.el.append(a);const s=e.el;t.containerRoleDescriptionMessage&&d(s,t.containerRoleDescriptionMessage),t.containerMessage&&c(s,t.containerMessage);const r=e.wrapperEl,n=t.id||r.getAttribute("id")||`swiper-wrapper-${function(e=16){return"x".repeat(e).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}(16)}`,l=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";var o;o=n,i(r).forEach((e=>{e.setAttribute("id",o)})),function(e,t){(e=i(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(r,l),b();let{nextEl:p,prevEl:u}=e.navigation?e.navigation:{};p=i(p),u=i(u),p&&p.forEach((e=>g(e,n,t.nextSlideMessage))),u&&u.forEach((e=>g(e,n,t.prevSlideMessage))),f()&&(Array.isArray(e.pagination.el)?e.pagination.el:[e.pagination.el]).forEach((e=>{e.addEventListener("keydown",m)})),e.el.addEventListener("focus",y,!0),e.el.addEventListener("pointerdown",v,!0),e.el.addEventListener("pointerup",w,!0)})()})),s("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{e.params.a11y.enabled&&b()})),s("fromEdge toEdge afterInit lock unlock",(()=>{e.params.a11y.enabled&&function(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:t,prevEl:s}=e.navigation;s&&(e.isBeginning?(p(s),l(s)):(u(s),n(s))),t&&(e.isEnd?(p(t),l(t)):(u(t),n(t)))}()})),s("paginationUpdate",(()=>{e.params.a11y.enabled&&function(){const t=e.params.a11y;h()&&e.pagination.bullets.forEach((s=>{e.params.pagination.clickable&&(n(s),e.params.pagination.renderBullet||(o(s,"button"),c(s,t.paginationBulletMessage.replace(/\{\{index\}\}/,te(s)+1)))),s.matches(Oe(e.params.pagination.bulletActiveClass))?s.setAttribute("aria-current","true"):s.removeAttribute("aria-current")}))}()})),s("destroy",(()=>{e.params.a11y.enabled&&function(){a&&a.length>0&&a.remove();let{nextEl:t,prevEl:s}=e.navigation?e.navigation:{};t=i(t),s=i(s),t&&t.forEach((e=>e.removeEventListener("keydown",m))),s&&s.forEach((e=>e.removeEventListener("keydown",m))),f()&&(Array.isArray(e.pagination.el)?e.pagination.el:[e.pagination.el]).forEach((e=>{e.removeEventListener("keydown",m)})),e.el.removeEventListener("focus",y,!0),e.el.removeEventListener("pointerdown",v,!0),e.el.removeEventListener("pointerup",w,!0)}()}))},function({swiper:e,extendParams:t,on:s}){t({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let a=!1,r={};const i=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),n=e=>{const t=N();let s;s=e?new URL(e):t.location;const a=s.pathname.slice(1).split("/").filter((e=>""!==e)),r=a.length;return{key:a[r-2],value:a[r-1]}},l=(t,s)=>{const r=N();if(!a||!e.params.history.enabled)return;let n;n=e.params.url?new URL(e.params.url):r.location;const l=e.slides[s];let o=i(l.getAttribute("data-history"));if(e.params.history.root.length>0){let s=e.params.history.root;"/"===s[s.length-1]&&(s=s.slice(0,s.length-1)),o=`${s}/${t?`${t}/`:""}${o}`}else n.pathname.includes(t)||(o=`${t?`${t}/`:""}${o}`);e.params.history.keepQuery&&(o+=n.search);const d=r.history.state;d&&d.value===o||(e.params.history.replaceState?r.history.replaceState({value:o},null,o):r.history.pushState({value:o},null,o))},o=(t,s,a)=>{if(s)for(let r=0,n=e.slides.length;r<n;r+=1){const n=e.slides[r];if(i(n.getAttribute("data-history"))===s){const s=e.getSlideIndex(n);e.slideTo(s,t,a)}}else e.slideTo(0,t,a)},d=()=>{r=n(e.params.url),o(e.params.speed,r.value,!1)};s("init",(()=>{e.params.history.enabled&&(()=>{const t=N();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);a=!0,r=n(e.params.url),r.key||r.value?(o(0,r.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener("popstate",d)):e.params.history.replaceState||t.addEventListener("popstate",d)}})()})),s("destroy",(()=>{e.params.history.enabled&&(()=>{const t=N();e.params.history.replaceState||t.removeEventListener("popstate",d)})()})),s("transitionEnd _freeModeNoMomentumRelease",(()=>{a&&l(e.params.history.key,e.activeIndex)})),s("slideChange",(()=>{a&&e.params.cssMode&&l(e.params.history.key,e.activeIndex)}))},function({swiper:e,extendParams:t,emit:s,on:a}){let r=!1;const i=X(),n=N();t({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}});const l=()=>{s("hashChange");const t=i.location.hash.replace("#","");if(t!==e.slides[e.activeIndex].getAttribute("data-hash")){const s=e.getSlideIndex(Z(e.slidesEl,`.${e.params.slideClass}[data-hash="${t}"], swiper-slide[data-hash="${t}"]`)[0]);if(void 0===s)return;e.slideTo(s)}},o=()=>{if(r&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&n.history&&n.history.replaceState)n.history.replaceState(null,null,`#${e.slides[e.activeIndex].getAttribute("data-hash")}`||""),s("hashSet");else{const t=e.slides[e.activeIndex],a=t.getAttribute("data-hash")||t.getAttribute("data-history");i.location.hash=a||"",s("hashSet")}};a("init",(()=>{e.params.hashNavigation.enabled&&(()=>{if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;r=!0;const t=i.location.hash.replace("#","");if(t){const s=0;for(let a=0,r=e.slides.length;a<r;a+=1){const r=e.slides[a];if((r.getAttribute("data-hash")||r.getAttribute("data-history"))===t){const t=e.getSlideIndex(r);e.slideTo(t,s,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&n.addEventListener("hashchange",l)})()})),a("destroy",(()=>{e.params.hashNavigation.enabled&&e.params.hashNavigation.watchState&&n.removeEventListener("hashchange",l)})),a("transitionEnd _freeModeNoMomentumRelease",(()=>{r&&o()})),a("slideChange",(()=>{r&&e.params.cssMode&&o()}))},function({swiper:e,extendParams:t,on:s,emit:a,params:r}){let i,n;e.autoplay={running:!1,paused:!1,timeLeft:0},t({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let l,o,d,c,p,u,m,h=r&&r.autoplay?r.autoplay.delay:3e3,f=r&&r.autoplay?r.autoplay.delay:3e3,g=(new Date).getTime;function v(t){e&&!e.destroyed&&e.wrapperEl&&t.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",v),S())}const w=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?o=!0:o&&(f=l,o=!1);const t=e.autoplay.paused?l:g+f-(new Date).getTime();e.autoplay.timeLeft=t,a("autoplayTimeLeft",t,t/h),n=requestAnimationFrame((()=>{w()}))},y=t=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(n),w();let s=void 0===t?e.params.autoplay.delay:t;h=e.params.autoplay.delay,f=e.params.autoplay.delay;const r=(()=>{let t;if(t=e.virtual&&e.params.virtual.enabled?e.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]:e.slides[e.activeIndex],t)return parseInt(t.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(r)&&r>0&&void 0===t&&(s=r,h=r,f=r),l=s;const o=e.params.speed,d=()=>{e&&!e.destroyed&&(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev(o,!0,!0),a("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,o,!0,!0),a("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext(o,!0,!0),a("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,o,!0,!0),a("autoplay")),e.params.cssMode&&(g=(new Date).getTime(),requestAnimationFrame((()=>{y()}))))};return s>0?(clearTimeout(i),i=setTimeout((()=>{d()}),s)):requestAnimationFrame((()=>{d()})),s},b=()=>{e.autoplay.running=!0,y(),a("autoplayStart")},E=()=>{e.autoplay.running=!1,clearTimeout(i),cancelAnimationFrame(n),a("autoplayStop")},x=(t,s)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(i),t||(m=!0);const r=()=>{a("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",v):S()};if(e.autoplay.paused=!0,s)return u&&(l=e.params.autoplay.delay),u=!1,void r();const n=l||e.params.autoplay.delay;l=n-((new Date).getTime()-g),e.isEnd&&l<0&&!e.params.loop||(l<0&&(l=0),r())},S=()=>{e.isEnd&&l<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(g=(new Date).getTime(),m?(m=!1,y(l)):y(),e.autoplay.paused=!1,a("autoplayResume"))},T=()=>{if(e.destroyed||!e.autoplay.running)return;const t=X();"hidden"===t.visibilityState&&(m=!0,x(!0)),"visible"===t.visibilityState&&S()},M=e=>{"mouse"===e.pointerType&&(m=!0,x(!0))},C=t=>{"mouse"===t.pointerType&&e.autoplay.paused&&S()};s("init",(()=>{e.params.autoplay.enabled&&(e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",M),e.el.addEventListener("pointerleave",C)),X().addEventListener("visibilitychange",T),g=(new Date).getTime(),b())})),s("destroy",(()=>{e.el.removeEventListener("pointerenter",M),e.el.removeEventListener("pointerleave",C),X().removeEventListener("visibilitychange",T),e.autoplay.running&&E()})),s("beforeTransitionStart",((t,s,a)=>{!e.destroyed&&e.autoplay.running&&(a||!e.params.autoplay.disableOnInteraction?x(!0,!0):E())})),s("sliderFirstMove",(()=>{!e.destroyed&&e.autoplay.running&&(e.params.autoplay.disableOnInteraction?E():(d=!0,c=!1,m=!1,p=setTimeout((()=>{m=!0,c=!0,x(!0)}),200)))})),s("touchEnd",(()=>{if(!e.destroyed&&e.autoplay.running&&d){if(clearTimeout(p),clearTimeout(i),e.params.autoplay.disableOnInteraction)return c=!1,void(d=!1);c&&e.params.cssMode&&S(),c=!1,d=!1}})),s("slideChange",(()=>{!e.destroyed&&e.autoplay.running&&(u=!0)})),Object.assign(e.autoplay,{start:b,stop:E,pause:x,resume:S})},function({swiper:e,extendParams:t,on:s}){t({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let a=!1,r=!1;function i(){const t=e.thumbs.swiper;if(!t||t.destroyed)return;const s=t.clickedIndex,a=t.clickedSlide;if(a&&a.classList.contains(e.params.thumbs.slideThumbActiveClass))return;if(null==s)return;let r;r=t.params.loop?parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10):s,e.params.loop?e.slideToLoop(r):e.slideTo(r)}function n(){const{thumbs:t}=e.params;if(a)return!1;a=!0;const s=e.constructor;if(t.swiper instanceof s)e.thumbs.swiper=t.swiper,Object.assign(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper.update();else if(V(t.swiper)){const a=Object.assign({},t.swiper);Object.assign(a,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper=new s(a),r=!0}return e.thumbs.swiper.el.classList.add(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",i),!0}function l(t){const s=e.thumbs.swiper;if(!s||s.destroyed)return;const a="auto"===s.params.slidesPerView?s.slidesPerViewDynamic():s.params.slidesPerView;let r=1;const i=e.params.thumbs.slideThumbActiveClass;if(e.params.slidesPerView>1&&!e.params.centeredSlides&&(r=e.params.slidesPerView),e.params.thumbs.multipleActiveThumbs||(r=1),r=Math.floor(r),s.slides.forEach((e=>e.classList.remove(i))),s.params.loop||s.params.virtual&&s.params.virtual.enabled)for(let t=0;t<r;t+=1)Z(s.slidesEl,`[data-swiper-slide-index="${e.realIndex+t}"]`).forEach((e=>{e.classList.add(i)}));else for(let t=0;t<r;t+=1)s.slides[e.realIndex+t]&&s.slides[e.realIndex+t].classList.add(i);const n=e.params.thumbs.autoScrollOffset,l=n&&!s.params.loop;if(e.realIndex!==s.realIndex||l){const r=s.activeIndex;let i,o;if(s.params.loop){const t=s.slides.filter((t=>t.getAttribute("data-swiper-slide-index")===`${e.realIndex}`))[0];i=s.slides.indexOf(t),o=e.activeIndex>e.previousIndex?"next":"prev"}else i=e.realIndex,o=i>e.previousIndex?"next":"prev";l&&(i+="next"===o?n:-1*n),s.visibleSlidesIndexes&&s.visibleSlidesIndexes.indexOf(i)<0&&(s.params.centeredSlides?i=i>r?i-Math.floor(a/2)+1:i+Math.floor(a/2)-1:i>r&&s.params.slidesPerGroup,s.slideTo(i,t?0:void 0))}}e.thumbs={swiper:null},s("beforeInit",(()=>{const{thumbs:t}=e.params;if(t&&t.swiper)if("string"==typeof t.swiper||t.swiper instanceof HTMLElement){const s=X(),a=()=>{const a="string"==typeof t.swiper?s.querySelector(t.swiper):t.swiper;if(a&&a.swiper)t.swiper=a.swiper,n(),l(!0);else if(a){const s=r=>{t.swiper=r.detail[0],a.removeEventListener("init",s),n(),l(!0),t.swiper.update(),e.update()};a.addEventListener("init",s)}return a},r=()=>{e.destroyed||a()||requestAnimationFrame(r)};requestAnimationFrame(r)}else n(),l(!0)})),s("slideChange update resize observerUpdate",(()=>{l()})),s("setTransition",((t,s)=>{const a=e.thumbs.swiper;a&&!a.destroyed&&a.setTransition(s)})),s("beforeDestroy",(()=>{const t=e.thumbs.swiper;t&&!t.destroyed&&r&&t.destroy()})),Object.assign(e.thumbs,{init:n,update:l})},function({swiper:e,extendParams:t,emit:s,once:a}){t({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(e,{freeMode:{onTouchStart:function(){const t=e.getTranslate();e.setTranslate(t),e.setTransition(0),e.touchEventsData.velocities.length=0,e.freeMode.onTouchEnd({currentPos:e.rtl?e.translate:-e.translate})},onTouchMove:function(){const{touchEventsData:t,touches:s}=e;0===t.velocities.length&&t.velocities.push({position:s[e.isHorizontal()?"startX":"startY"],time:t.touchStartTime}),t.velocities.push({position:s[e.isHorizontal()?"currentX":"currentY"],time:j()})},onTouchEnd:function({currentPos:t}){const{params:r,wrapperEl:i,rtlTranslate:n,snapGrid:l,touchEventsData:o}=e,d=j()-o.touchStartTime;if(t<-e.minTranslate())e.slideTo(e.activeIndex);else if(t>-e.maxTranslate())e.slides.length<l.length?e.slideTo(l.length-1):e.slideTo(e.slides.length-1);else{if(r.freeMode.momentum){if(o.velocities.length>1){const t=o.velocities.pop(),s=o.velocities.pop(),a=t.position-s.position,i=t.time-s.time;e.velocity=a/i,e.velocity/=2,Math.abs(e.velocity)<r.freeMode.minimumVelocity&&(e.velocity=0),(i>150||j()-t.time>300)&&(e.velocity=0)}else e.velocity=0;e.velocity*=r.freeMode.momentumVelocityRatio,o.velocities.length=0;let t=1e3*r.freeMode.momentumRatio;const d=e.velocity*t;let c=e.translate+d;n&&(c=-c);let p,u=!1;const m=20*Math.abs(e.velocity)*r.freeMode.momentumBounceRatio;let h;if(c<e.maxTranslate())r.freeMode.momentumBounce?(c+e.maxTranslate()<-m&&(c=e.maxTranslate()-m),p=e.maxTranslate(),u=!0,o.allowMomentumBounce=!0):c=e.maxTranslate(),r.loop&&r.centeredSlides&&(h=!0);else if(c>e.minTranslate())r.freeMode.momentumBounce?(c-e.minTranslate()>m&&(c=e.minTranslate()+m),p=e.minTranslate(),u=!0,o.allowMomentumBounce=!0):c=e.minTranslate(),r.loop&&r.centeredSlides&&(h=!0);else if(r.freeMode.sticky){let t;for(let e=0;e<l.length;e+=1)if(l[e]>-c){t=e;break}c=Math.abs(l[t]-c)<Math.abs(l[t-1]-c)||"next"===e.swipeDirection?l[t]:l[t-1],c=-c}if(h&&a("transitionEnd",(()=>{e.loopFix()})),0!==e.velocity){if(t=n?Math.abs((-c-e.translate)/e.velocity):Math.abs((c-e.translate)/e.velocity),r.freeMode.sticky){const s=Math.abs((n?-c:c)-e.translate),a=e.slidesSizesGrid[e.activeIndex];t=s<a?r.speed:s<2*a?1.5*r.speed:2.5*r.speed}}else if(r.freeMode.sticky)return void e.slideToClosest();r.freeMode.momentumBounce&&u?(e.updateProgress(p),e.setTransition(t),e.setTranslate(c),e.transitionStart(!0,e.swipeDirection),e.animating=!0,ae(i,(()=>{e&&!e.destroyed&&o.allowMomentumBounce&&(s("momentumBounce"),e.setTransition(r.speed),setTimeout((()=>{e.setTranslate(p),ae(i,(()=>{e&&!e.destroyed&&e.transitionEnd()}))}),0))}))):e.velocity?(s("_freeModeNoMomentumRelease"),e.updateProgress(c),e.setTransition(t),e.setTranslate(c),e.transitionStart(!0,e.swipeDirection),e.animating||(e.animating=!0,ae(i,(()=>{e&&!e.destroyed&&e.transitionEnd()})))):e.updateProgress(c),e.updateActiveIndex(),e.updateSlidesClasses()}else{if(r.freeMode.sticky)return void e.slideToClosest();r.freeMode&&s("_freeModeNoMomentumRelease")}(!r.freeMode.momentum||d>=r.longSwipesMs)&&(e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses())}}}})},function({swiper:e,extendParams:t}){let s,a,r;t({grid:{rows:1,fill:"column"}}),e.grid={initSlides:t=>{const{slidesPerView:i}=e.params,{rows:n,fill:l}=e.params.grid;a=s/n,r=Math.floor(t/n),s=Math.floor(t/n)===t/n?t:Math.ceil(t/n)*n,"auto"!==i&&"row"===l&&(s=Math.max(s,i*n))},updateSlide:(t,i,n,l)=>{const{slidesPerGroup:o,spaceBetween:d}=e.params,{rows:c,fill:p}=e.params.grid;let u,m,h;if("row"===p&&o>1){const e=Math.floor(t/(o*c)),a=t-c*o*e,r=0===e?o:Math.min(Math.ceil((n-e*c*o)/c),o);h=Math.floor(a/r),m=a-h*r+e*o,u=m+h*s/c,i.style.order=u}else"column"===p?(m=Math.floor(t/c),h=t-m*c,(m>r||m===r&&h===c-1)&&(h+=1,h>=c&&(h=0,m+=1))):(h=Math.floor(t/a),m=t-h*a);i.style[l("margin-top")]=0!==h?d&&`${d}px`:""},updateWrapperSize:(t,a,r)=>{const{spaceBetween:i,centeredSlides:n,roundLengths:l}=e.params,{rows:o}=e.params.grid;if(e.virtualSize=(t+i)*s,e.virtualSize=Math.ceil(e.virtualSize/o)-i,e.wrapperEl.style[r("width")]=`${e.virtualSize+i}px`,n){const t=[];for(let s=0;s<a.length;s+=1){let r=a[s];l&&(r=Math.floor(r)),a[s]<e.virtualSize+a[0]&&t.push(r)}a.splice(0,a.length),a.push(...t)}}}},function({swiper:e}){Object.assign(e,{appendSlide:_e.bind(e),prependSlide:De.bind(e),addSlide:Be.bind(e),removeSlide:Ge.bind(e),removeAllSlides:He.bind(e)})},function({swiper:e,extendParams:t,on:s}){t({fadeEffect:{crossFade:!1}}),Xe({effect:"fade",swiper:e,on:s,setTranslate:()=>{const{slides:t}=e;e.params.fadeEffect;for(let s=0;s<t.length;s+=1){const t=e.slides[s];let a=-t.swiperSlideOffset;e.params.virtualTranslate||(a-=e.translate);let r=0;e.isHorizontal()||(r=a,a=0);const i=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t.progress),0):1+Math.min(Math.max(t.progress,-1),0),n=Ye(0,t);n.style.opacity=i,n.style.transform=`translate3d(${a}px, ${r}px, 0px)`}},setTransition:t=>{const s=e.slides.map((e=>K(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`})),Ne({swiper:e,duration:t,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})},function({swiper:e,extendParams:t,on:s}){t({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const a=(e,t,s)=>{let a=s?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),r=s?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");a||(a=Q("div","swiper-slide-shadow-"+(s?"left":"top")),e.append(a)),r||(r=Q("div","swiper-slide-shadow-"+(s?"right":"bottom")),e.append(r)),a&&(a.style.opacity=Math.max(-t,0)),r&&(r.style.opacity=Math.max(t,0))};Xe({effect:"cube",swiper:e,on:s,setTranslate:()=>{const{el:t,wrapperEl:s,slides:r,width:i,height:n,rtlTranslate:l,size:o,browser:d}=e,c=e.params.cubeEffect,p=e.isHorizontal(),u=e.virtual&&e.params.virtual.enabled;let m,h=0;c.shadow&&(p?(m=e.slidesEl.querySelector(".swiper-cube-shadow"),m||(m=Q("div","swiper-cube-shadow"),e.slidesEl.append(m)),m.style.height=`${i}px`):(m=t.querySelector(".swiper-cube-shadow"),m||(m=Q("div","swiper-cube-shadow"),t.append(m))));for(let e=0;e<r.length;e+=1){const t=r[e];let s=e;u&&(s=parseInt(t.getAttribute("data-swiper-slide-index"),10));let i=90*s,n=Math.floor(i/360);l&&(i=-i,n=Math.floor(-i/360));const d=Math.max(Math.min(t.progress,1),-1);let m=0,f=0,g=0;s%4==0?(m=4*-n*o,g=0):(s-1)%4==0?(m=0,g=4*-n*o):(s-2)%4==0?(m=o+4*n*o,g=o):(s-3)%4==0&&(m=-o,g=3*o+4*o*n),l&&(m=-m),p||(f=m,m=0);const v=`rotateX(${p?0:-i}deg) rotateY(${p?i:0}deg) translate3d(${m}px, ${f}px, ${g}px)`;d<=1&&d>-1&&(h=90*s+90*d,l&&(h=90*-s-90*d)),t.style.transform=v,c.slideShadows&&a(t,d,p)}if(s.style.transformOrigin=`50% 50% -${o/2}px`,s.style["-webkit-transform-origin"]=`50% 50% -${o/2}px`,c.shadow)if(p)m.style.transform=`translate3d(0px, ${i/2+c.shadowOffset}px, ${-i/2}px) rotateX(90deg) rotateZ(0deg) scale(${c.shadowScale})`;else{const e=Math.abs(h)-90*Math.floor(Math.abs(h)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),s=c.shadowScale,a=c.shadowScale/t,r=c.shadowOffset;m.style.transform=`scale3d(${s}, 1, ${a}) translate3d(0px, ${n/2+r}px, ${-n/2/a}px) rotateX(-90deg)`}const f=(d.isSafari||d.isWebView)&&d.needPerspectiveFix?-o/2:0;s.style.transform=`translate3d(0px,0,${f}px) rotateX(${e.isHorizontal()?0:h}deg) rotateY(${e.isHorizontal()?-h:0}deg)`,s.style.setProperty("--swiper-cube-translate-z",`${f}px`)},setTransition:t=>{const{el:s,slides:a}=e;if(a.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),e.params.cubeEffect.shadow&&!e.isHorizontal()){const e=s.querySelector(".swiper-cube-shadow");e&&(e.style.transitionDuration=`${t}ms`)}},recreateShadows:()=>{const t=e.isHorizontal();e.slides.forEach((e=>{const s=Math.max(Math.min(e.progress,1),-1);a(e,s,t)}))},getEffectParams:()=>e.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function({swiper:e,extendParams:t,on:s}){t({flipEffect:{slideShadows:!0,limitRotation:!0}});const a=(t,s,a)=>{let r=e.isHorizontal()?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),i=e.isHorizontal()?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");r||(r=qe(0,t,e.isHorizontal()?"left":"top")),i||(i=qe(0,t,e.isHorizontal()?"right":"bottom")),r&&(r.style.opacity=Math.max(-s,0)),i&&(i.style.opacity=Math.max(s,0))};Xe({effect:"flip",swiper:e,on:s,setTranslate:()=>{const{slides:t,rtlTranslate:s}=e,r=e.params.flipEffect;for(let i=0;i<t.length;i+=1){const n=t[i];let l=n.progress;e.params.flipEffect.limitRotation&&(l=Math.max(Math.min(n.progress,1),-1));const o=n.swiperSlideOffset;let d=-180*l,c=0,p=e.params.cssMode?-o-e.translate:-o,u=0;e.isHorizontal()?s&&(d=-d):(u=p,p=0,c=-d,d=0),n.style.zIndex=-Math.abs(Math.round(l))+t.length,r.slideShadows&&a(n,l);const m=`translate3d(${p}px, ${u}px, 0px) rotateX(${c}deg) rotateY(${d}deg)`;Ye(0,n).style.transform=m}},setTransition:t=>{const s=e.slides.map((e=>K(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Ne({swiper:e,duration:t,transformElements:s})},recreateShadows:()=>{e.params.flipEffect,e.slides.forEach((t=>{let s=t.progress;e.params.flipEffect.limitRotation&&(s=Math.max(Math.min(t.progress,1),-1)),a(t,s)}))},getEffectParams:()=>e.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})},function({swiper:e,extendParams:t,on:s}){t({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),Xe({effect:"coverflow",swiper:e,on:s,setTranslate:()=>{const{width:t,height:s,slides:a,slidesSizesGrid:r}=e,i=e.params.coverflowEffect,n=e.isHorizontal(),l=e.translate,o=n?t/2-l:s/2-l,d=n?i.rotate:-i.rotate,c=i.depth;for(let e=0,t=a.length;e<t;e+=1){const t=a[e],s=r[e],l=(o-t.swiperSlideOffset-s/2)/s,p="function"==typeof i.modifier?i.modifier(l):l*i.modifier;let u=n?d*p:0,m=n?0:d*p,h=-c*Math.abs(p),f=i.stretch;"string"==typeof f&&-1!==f.indexOf("%")&&(f=parseFloat(i.stretch)/100*s);let g=n?0:f*p,v=n?f*p:0,w=1-(1-i.scale)*Math.abs(p);Math.abs(v)<.001&&(v=0),Math.abs(g)<.001&&(g=0),Math.abs(h)<.001&&(h=0),Math.abs(u)<.001&&(u=0),Math.abs(m)<.001&&(m=0),Math.abs(w)<.001&&(w=0);const y=`translate3d(${v}px,${g}px,${h}px)  rotateX(${m}deg) rotateY(${u}deg) scale(${w})`;if(Ye(0,t).style.transform=y,t.style.zIndex=1-Math.abs(Math.round(p)),i.slideShadows){let e=n?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),s=n?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");e||(e=qe(0,t,n?"left":"top")),s||(s=qe(0,t,n?"right":"bottom")),e&&(e.style.opacity=p>0?p:0),s&&(s.style.opacity=-p>0?-p:0)}}},setTransition:t=>{e.slides.map((e=>K(e))).forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function({swiper:e,extendParams:t,on:s}){t({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const a=e=>"string"==typeof e?e:`${e}px`;Xe({effect:"creative",swiper:e,on:s,setTranslate:()=>{const{slides:t,wrapperEl:s,slidesSizesGrid:r}=e,i=e.params.creativeEffect,{progressMultiplier:n}=i,l=e.params.centeredSlides;if(l){const t=r[0]/2-e.params.slidesOffsetBefore||0;s.style.transform=`translateX(calc(50% - ${t}px))`}for(let s=0;s<t.length;s+=1){const r=t[s],o=r.progress,d=Math.min(Math.max(r.progress,-i.limitProgress),i.limitProgress);let c=d;l||(c=Math.min(Math.max(r.originalProgress,-i.limitProgress),i.limitProgress));const p=r.swiperSlideOffset,u=[e.params.cssMode?-p-e.translate:-p,0,0],m=[0,0,0];let h=!1;e.isHorizontal()||(u[1]=u[0],u[0]=0);let f={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};d<0?(f=i.next,h=!0):d>0&&(f=i.prev,h=!0),u.forEach(((e,t)=>{u[t]=`calc(${e}px + (${a(f.translate[t])} * ${Math.abs(d*n)}))`})),m.forEach(((e,t)=>{m[t]=f.rotate[t]*Math.abs(d*n)})),r.style.zIndex=-Math.abs(Math.round(o))+t.length;const g=u.join(", "),v=`rotateX(${m[0]}deg) rotateY(${m[1]}deg) rotateZ(${m[2]}deg)`,w=c<0?`scale(${1+(1-f.scale)*c*n})`:`scale(${1-(1-f.scale)*c*n})`,y=c<0?1+(1-f.opacity)*c*n:1-(1-f.opacity)*c*n,b=`translate3d(${g}) ${v} ${w}`;if(h&&f.shadow||!h){let e=r.querySelector(".swiper-slide-shadow");if(!e&&f.shadow&&(e=qe(0,r)),e){const t=i.shadowPerProgress?d*(1/i.limitProgress):d;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const E=Ye(0,r);E.style.transform=b,E.style.opacity=y,f.origin&&(E.style.transformOrigin=f.origin)}},setTransition:t=>{const s=e.slides.map((e=>K(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Ne({swiper:e,duration:t,transformElements:s,allSlides:!0})},perspective:()=>e.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})},function({swiper:e,extendParams:t,on:s}){t({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),Xe({effect:"cards",swiper:e,on:s,setTranslate:()=>{const{slides:t,activeIndex:s}=e,a=e.params.cardsEffect,{startTranslate:r,isTouched:i}=e.touchEventsData,n=e.translate;for(let l=0;l<t.length;l+=1){const o=t[l],d=o.progress,c=Math.min(Math.max(d,-4),4);let p=o.swiperSlideOffset;e.params.centeredSlides&&!e.params.cssMode&&(e.wrapperEl.style.transform=`translateX(${e.minTranslate()}px)`),e.params.centeredSlides&&e.params.cssMode&&(p-=t[0].swiperSlideOffset);let u=e.params.cssMode?-p-e.translate:-p,m=0;const h=-100*Math.abs(c);let f=1,g=-a.perSlideRotate*c,v=a.perSlideOffset-.75*Math.abs(c);const w=e.virtual&&e.params.virtual.enabled?e.virtual.from+l:l,y=(w===s||w===s-1)&&c>0&&c<1&&(i||e.params.cssMode)&&n<r,b=(w===s||w===s+1)&&c<0&&c>-1&&(i||e.params.cssMode)&&n>r;if(y||b){const e=(1-Math.abs((Math.abs(c)-.5)/.5))**.5;g+=-28*c*e,f+=-.5*e,v+=96*e,m=-25*e*Math.abs(c)+"%"}if(u=c<0?`calc(${u}px + (${v*Math.abs(c)}%))`:c>0?`calc(${u}px + (-${v*Math.abs(c)}%))`:`${u}px`,!e.isHorizontal()){const e=m;m=u,u=e}const E=c<0?""+(1+(1-f)*c):""+(1-(1-f)*c),x=`\n        translate3d(${u}, ${m}, ${h}px)\n        rotateZ(${a.rotate?g:0}deg)\n        scale(${E})\n      `;if(a.slideShadows){let e=o.querySelector(".swiper-slide-shadow");e||(e=qe(0,o)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(c)-.5)/.5,0),1))}o.style.zIndex=-Math.abs(Math.round(d))+t.length,Ye(0,o).style.transform=x}},setTransition:t=>{const s=e.slides.map((e=>K(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Ne({swiper:e,duration:t,transformElements:s})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}];Ie.use(je);var Re,Ve=document,Fe=c(),We=Fe.categoriesInnerContainerEl,Ue=Fe.categoriesWrapperEl,Ke=function(e,t){var s=this;this.id=e,this.name=t,this.template=function(){var e=Ve.createElement("li"),t=Ve.createElement("p");return e.classList.add("category-item","swiper-slide",0===s.id&&"Todo"===s.name&&"active"),e.dataset.id=s.id,t.classList.add("category-item__text"),t.innerText=s.name,e.innerHTML='\n      <svg class="category-item__bg" viewBox="0 0 75 75" xmlns="http://www.w3.org/2000/svg">\n        <g clip-path="url(#mask-category)">\n          <path d="M21.5 15.5C8.30002 13.5 -0.666656 25.5 -2.49999 29.5C-7.99997 46.5 1.00001 82.5 35 82.5C69 82.5 69 67 72.5 51.5C76 36 70.5 24.5 63.5 26.5C55.542 28.7737 48.5 40 36.5 39C24.5 38 38 18 21.5 15.5Z"/>\n        </g>\n        <defs>\n          <clipPath id="mask-category">\n            <rect width="75" height="75" rx="37.5"/>\n          </clipPath>\n        </defs>\n      </svg>\n    ',e.appendChild(t),e.onclick=function(){Array.from(e.parentElement.children).forEach((function(e){return e.classList.remove("active")})),e.classList.add("active"),s.handleFilter()},e},this.handleFilter=function(){$(0),D()}},Ze=function(){var e=r(n().mark((function e(){var t;return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=3,u("/categories");case 3:(t=e.sent).unshift({id:0,name:"Todo"}),t.forEach((function(e){var t=new Ke(e.id,e.name);Ue.appendChild(t.template())})),new Ie(We,{slidesPerView:"auto",grabCursor:!0,containerModifierClass:"categories-",speed:500,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}});case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),Qe=c(),Je=Qe.wrapper,et=Qe.header,tt=Qe.innerHeader,st=Qe.filtersBarEl;(Re=r(n().mark((function e(){return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ze();case 2:return e.next=4,D();case 4:case"end":return e.stop()}}),e)}))),function(){return Re.apply(this,arguments)})(),Je.onscroll=function(){var e=r(n().mark((function e(t){var s,a,r;return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(s=this.scrollTop,a=et.clientHeight,r=tt.clientHeight,this.scrollHeight-this.clientHeight!==s){e.next=6;break}return e.next=6,D();case 6:et.classList.toggle("sticky",s>10),et.style.height="".concat(a,"px"),st.classList.toggle("sticky",s+r>=st.offsetTop);case 9:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},61:function(e,t,s){var a=s(698).default;function r(){"use strict";e.exports=r=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},s=Object.prototype,i=s.hasOwnProperty,n=Object.defineProperty||function(e,t,s){e[t]=s.value},l="function"==typeof Symbol?Symbol:{},o=l.iterator||"@@iterator",d=l.asyncIterator||"@@asyncIterator",c=l.toStringTag||"@@toStringTag";function p(e,t,s){return Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{p({},"")}catch(e){p=function(e,t,s){return e[t]=s}}function u(e,t,s,a){var r=t&&t.prototype instanceof f?t:f,i=Object.create(r.prototype),l=new P(a||[]);return n(i,"_invoke",{value:T(e,s,l)}),i}function m(e,t,s){try{return{type:"normal",arg:e.call(t,s)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var h={};function f(){}function g(){}function v(){}var w={};p(w,o,(function(){return this}));var y=Object.getPrototypeOf,b=y&&y(y(k([])));b&&b!==s&&i.call(b,o)&&(w=b);var E=v.prototype=f.prototype=Object.create(w);function x(e){["next","throw","return"].forEach((function(t){p(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function s(r,n,l,o){var d=m(e[r],e,n);if("throw"!==d.type){var c=d.arg,p=c.value;return p&&"object"==a(p)&&i.call(p,"__await")?t.resolve(p.__await).then((function(e){s("next",e,l,o)}),(function(e){s("throw",e,l,o)})):t.resolve(p).then((function(e){c.value=e,l(c)}),(function(e){return s("throw",e,l,o)}))}o(d.arg)}var r;n(this,"_invoke",{value:function(e,a){function i(){return new t((function(t,r){s(e,a,t,r)}))}return r=r?r.then(i,i):i()}})}function T(e,t,s){var a="suspendedStart";return function(r,i){if("executing"===a)throw new Error("Generator is already running");if("completed"===a){if("throw"===r)throw i;return{value:void 0,done:!0}}for(s.method=r,s.arg=i;;){var n=s.delegate;if(n){var l=M(n,s);if(l){if(l===h)continue;return l}}if("next"===s.method)s.sent=s._sent=s.arg;else if("throw"===s.method){if("suspendedStart"===a)throw a="completed",s.arg;s.dispatchException(s.arg)}else"return"===s.method&&s.abrupt("return",s.arg);a="executing";var o=m(e,t,s);if("normal"===o.type){if(a=s.done?"completed":"suspendedYield",o.arg===h)continue;return{value:o.arg,done:s.done}}"throw"===o.type&&(a="completed",s.method="throw",s.arg=o.arg)}}}function M(e,t){var s=t.method,a=e.iterator[s];if(void 0===a)return t.delegate=null,"throw"===s&&e.iterator.return&&(t.method="return",t.arg=void 0,M(e,t),"throw"===t.method)||"return"!==s&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+s+"' method")),h;var r=m(a,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,h;var i=r.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function k(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var s=-1,a=function t(){for(;++s<e.length;)if(i.call(e,s))return t.value=e[s],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:A}}function A(){return{value:void 0,done:!0}}return g.prototype=v,n(E,"constructor",{value:v,configurable:!0}),n(v,"constructor",{value:g,configurable:!0}),g.displayName=p(v,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,p(e,c,"GeneratorFunction")),e.prototype=Object.create(E),e},t.awrap=function(e){return{__await:e}},x(S.prototype),p(S.prototype,d,(function(){return this})),t.AsyncIterator=S,t.async=function(e,s,a,r,i){void 0===i&&(i=Promise);var n=new S(u(e,s,a,r),i);return t.isGeneratorFunction(s)?n:n.next().then((function(e){return e.done?e.value:n.next()}))},x(E),p(E,c,"Generator"),p(E,o,(function(){return this})),p(E,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),s=[];for(var a in t)s.push(a);return s.reverse(),function e(){for(;s.length;){var a=s.pop();if(a in t)return e.value=a,e.done=!1,e}return e.done=!0,e}},t.values=k,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(L),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function s(s,a){return n.type="throw",n.arg=e,t.next=s,a&&(t.method="next",t.arg=void 0),!!a}for(var a=this.tryEntries.length-1;a>=0;--a){var r=this.tryEntries[a],n=r.completion;if("root"===r.tryLoc)return s("end");if(r.tryLoc<=this.prev){var l=i.call(r,"catchLoc"),o=i.call(r,"finallyLoc");if(l&&o){if(this.prev<r.catchLoc)return s(r.catchLoc,!0);if(this.prev<r.finallyLoc)return s(r.finallyLoc)}else if(l){if(this.prev<r.catchLoc)return s(r.catchLoc,!0)}else{if(!o)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return s(r.finallyLoc)}}}},abrupt:function(e,t){for(var s=this.tryEntries.length-1;s>=0;--s){var a=this.tryEntries[s];if(a.tryLoc<=this.prev&&i.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var r=a;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var n=r?r.completion:{};return n.type=e,n.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(n)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var s=this.tryEntries[t];if(s.finallyLoc===e)return this.complete(s.completion,s.afterLoc),L(s),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var s=this.tryEntries[t];if(s.tryLoc===e){var a=s.completion;if("throw"===a.type){var r=a.arg;L(s)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,s){return this.delegate={iterator:k(e),resultName:t,nextLoc:s},"next"===this.method&&(this.arg=void 0),h}},t}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},698:function(e){function t(s){return e.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(s)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},687:function(e,t,s){var a=s(61)();e.exports=a;try{regeneratorRuntime=a}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=a:Function("r","regeneratorRuntime = r")(a)}}},function(e){e(e.s=461)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,